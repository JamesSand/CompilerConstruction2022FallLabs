Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     type -> Int
Rule 3     program -> function_list
Rule 4     function_list -> declaration Semi function_list
Rule 5     function_list -> function function_list
Rule 6     function_list -> empty
Rule 7     function -> type Identifier LParen parameter_list RParen LBrace block RBrace
Rule 8     function -> type Identifier LParen parameter_list RParen Semi
Rule 9     parameter_list -> parameter Comma parameter_list
Rule 10    parameter_list -> parameter
Rule 11    parameter_list -> empty
Rule 12    parameter -> type Identifier
Rule 13    block -> block block_item
Rule 14    block -> empty
Rule 15    block_item -> statement
Rule 16    block_item -> declaration Semi
Rule 17    statement -> statement_matched
Rule 18    statement -> statement_unmatched
Rule 19    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 20    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 21    statement_unmatched -> If LParen expression RParen statement
Rule 22    statement_matched -> While LParen expression RParen statement_matched
Rule 23    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 24    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 25    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 26    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 27    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 28    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 29    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 30    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 31    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 32    statement_unmatched -> Do statement_matched While LParen expression RParen Semi
Rule 33    statement_matched -> Continue Semi
Rule 34    statement_matched -> Return expression Semi
Rule 35    statement_matched -> opt_expression Semi
Rule 36    statement_matched -> LBrace block RBrace
Rule 37    statement_matched -> Break Semi
Rule 38    opt_expression -> expression
Rule 39    opt_expression -> empty
Rule 40    declaration -> type Identifier array
Rule 41    array -> empty
Rule 42    array -> LBracket Integer RBracket array
Rule 43    declaration -> type Identifier Assign expression
Rule 44    expression_list -> expression Comma expression_list
Rule 45    expression_list -> expression
Rule 46    expression_list -> empty
Rule 47    expression -> assignment
Rule 48    assignment -> conditional
Rule 49    conditional -> logical_or
Rule 50    logical_or -> logical_and
Rule 51    logical_and -> bit_or
Rule 52    bit_or -> xor
Rule 53    xor -> bit_and
Rule 54    bit_and -> equality
Rule 55    equality -> relational
Rule 56    relational -> additive
Rule 57    additive -> multiplicative
Rule 58    multiplicative -> unary
Rule 59    unary -> postfix
Rule 60    postfix -> primary
Rule 61    postfix -> Identifier LParen expression_list RParen
Rule 62    unary -> Minus unary
Rule 63    unary -> BitNot unary
Rule 64    unary -> Not unary
Rule 65    refer -> Identifier refer_arguments
Rule 66    refer_arguments -> LBracket expression RBracket refer_arguments
Rule 67    refer_arguments -> empty
Rule 68    assignment -> refer Assign expression
Rule 69    logical_or -> logical_or Or logical_and
Rule 70    logical_and -> logical_and And bit_or
Rule 71    bit_or -> bit_or BitOr xor
Rule 72    xor -> xor Xor bit_and
Rule 73    bit_and -> bit_and BitAnd equality
Rule 74    equality -> equality NotEqual relational
Rule 75    equality -> equality Equal relational
Rule 76    relational -> relational Less additive
Rule 77    relational -> relational Greater additive
Rule 78    relational -> relational LessEqual additive
Rule 79    relational -> relational GreaterEqual additive
Rule 80    additive -> additive Plus multiplicative
Rule 81    additive -> additive Minus multiplicative
Rule 82    multiplicative -> multiplicative Mul unary
Rule 83    multiplicative -> multiplicative Div unary
Rule 84    multiplicative -> multiplicative Mod unary
Rule 85    conditional -> logical_or Question expression Colon conditional
Rule 86    primary -> Integer
Rule 87    primary -> refer
Rule 88    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 70
Assign               : 43 68
BitAnd               : 73
BitNot               : 63
BitOr                : 71
Break                : 37
Colon                : 85
Comma                : 9 44
Continue             : 33
Div                  : 83
Do                   : 30 31 32
Else                 : 19 20
Equal                : 75
For                  : 24 25 26 27 28 29
Greater              : 77
GreaterEqual         : 79
Identifier           : 7 8 12 40 43 61 65
If                   : 19 20 21
Int                  : 2
Integer              : 42 86
LBrace               : 7 36
LBracket             : 42 66
LParen               : 7 8 19 20 21 22 23 24 25 26 27 28 29 30 31 32 61 88
Less                 : 76
LessEqual            : 78
Minus                : 62 81
Mod                  : 84
Mul                  : 82
Not                  : 64
NotEqual             : 74
Or                   : 69
Plus                 : 80
Question             : 85
RBrace               : 7 36
RBracket             : 42 66
RParen               : 7 8 19 20 21 22 23 24 25 26 27 28 29 30 31 32 61 88
Return               : 34
Semi                 : 4 8 16 24 24 25 25 26 26 27 27 28 28 29 29 30 31 32 33 34 35 37
While                : 22 23 30 31 32
Xor                  : 72
error                : 

Nonterminals, with rules where they appear

additive             : 56 76 77 78 79 80 81
array                : 40 42
assignment           : 47
bit_and              : 53 72 73
bit_or               : 51 70 71
block                : 7 13 36
block_item           : 13
conditional          : 48 85
declaration          : 4 16 25 27 29
empty                : 6 11 14 39 41 46 67
equality             : 54 73 74 75
expression           : 19 20 21 22 23 30 31 32 34 38 43 44 45 66 68 85 88
expression_list      : 44 61
function             : 5
function_list        : 3 4 5
logical_and          : 50 69 70
logical_or           : 49 69 85
multiplicative       : 57 80 81 82 83 84
opt_expression       : 24 24 24 25 25 26 26 26 27 27 28 28 28 29 29 35
parameter            : 9 10
parameter_list       : 7 8 9
postfix              : 59
primary              : 60
program              : 0
refer                : 68 87
refer_arguments      : 65 66
relational           : 55 74 75 76 77 78 79
statement            : 15 21
statement_matched    : 17 19 19 20 22 24 25 28 29 30 32
statement_unmatched  : 18 20 23 26 27 31
type                 : 7 8 12 40 43
unary                : 58 62 63 64 82 83 84
xor                  : 52 71 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (3) program -> . function_list
    (4) function_list -> . declaration Semi function_list
    (5) function_list -> . function function_list
    (6) function_list -> . empty
    (40) declaration -> . type Identifier array
    (43) declaration -> . type Identifier Assign expression
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    program                        shift and go to state 1
    function_list                  shift and go to state 2
    declaration                    shift and go to state 3
    function                       shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (3) program -> function_list .

    $end            reduce using rule 3 (program -> function_list .)


state 3

    (4) function_list -> declaration . Semi function_list

    Semi            shift and go to state 8


state 4

    (5) function_list -> function . function_list
    (4) function_list -> . declaration Semi function_list
    (5) function_list -> . function function_list
    (6) function_list -> . empty
    (40) declaration -> . type Identifier array
    (43) declaration -> . type Identifier Assign expression
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    function                       shift and go to state 4
    function_list                  shift and go to state 9
    declaration                    shift and go to state 3
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 5

    (6) function_list -> empty .

    $end            reduce using rule 6 (function_list -> empty .)


state 6

    (40) declaration -> type . Identifier array
    (43) declaration -> type . Identifier Assign expression
    (7) function -> type . Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> type . Identifier LParen parameter_list RParen Semi

    Identifier      shift and go to state 10


state 7

    (2) type -> Int .

    Identifier      reduce using rule 2 (type -> Int .)


state 8

    (4) function_list -> declaration Semi . function_list
    (4) function_list -> . declaration Semi function_list
    (5) function_list -> . function function_list
    (6) function_list -> . empty
    (40) declaration -> . type Identifier array
    (43) declaration -> . type Identifier Assign expression
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    declaration                    shift and go to state 3
    function_list                  shift and go to state 11
    function                       shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 9

    (5) function_list -> function function_list .

    $end            reduce using rule 5 (function_list -> function function_list .)


state 10

    (40) declaration -> type Identifier . array
    (43) declaration -> type Identifier . Assign expression
    (7) function -> type Identifier . LParen parameter_list RParen LBrace block RBrace
    (8) function -> type Identifier . LParen parameter_list RParen Semi
    (41) array -> . empty
    (42) array -> . LBracket Integer RBracket array
    (1) empty -> .

    Assign          shift and go to state 13
    LParen          shift and go to state 14
    LBracket        shift and go to state 16
    Semi            reduce using rule 1 (empty -> .)

    array                          shift and go to state 12
    empty                          shift and go to state 15

state 11

    (4) function_list -> declaration Semi function_list .

    $end            reduce using rule 4 (function_list -> declaration Semi function_list .)


state 12

    (40) declaration -> type Identifier array .

    Semi            reduce using rule 40 (declaration -> type Identifier array .)


state 13

    (43) declaration -> type Identifier Assign . expression
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 18
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 14

    (7) function -> type Identifier LParen . parameter_list RParen LBrace block RBrace
    (8) function -> type Identifier LParen . parameter_list RParen Semi
    (9) parameter_list -> . parameter Comma parameter_list
    (10) parameter_list -> . parameter
    (11) parameter_list -> . empty
    (12) parameter -> . type Identifier
    (1) empty -> .
    (2) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    type                           shift and go to state 39
    parameter_list                 shift and go to state 40
    parameter                      shift and go to state 41
    empty                          shift and go to state 42

state 15

    (41) array -> empty .

    Semi            reduce using rule 41 (array -> empty .)


state 16

    (42) array -> LBracket . Integer RBracket array

    Integer         shift and go to state 43


state 17

    (65) refer -> Identifier . refer_arguments
    (61) postfix -> Identifier . LParen expression_list RParen
    (66) refer_arguments -> . LBracket expression RBracket refer_arguments
    (67) refer_arguments -> . empty
    (1) empty -> .

    LParen          shift and go to state 45
    LBracket        shift and go to state 46
    Assign          reduce using rule 1 (empty -> .)
    Mul             reduce using rule 1 (empty -> .)
    Div             reduce using rule 1 (empty -> .)
    Mod             reduce using rule 1 (empty -> .)
    Plus            reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    Less            reduce using rule 1 (empty -> .)
    Greater         reduce using rule 1 (empty -> .)
    LessEqual       reduce using rule 1 (empty -> .)
    GreaterEqual    reduce using rule 1 (empty -> .)
    NotEqual        reduce using rule 1 (empty -> .)
    Equal           reduce using rule 1 (empty -> .)
    BitAnd          reduce using rule 1 (empty -> .)
    Xor             reduce using rule 1 (empty -> .)
    BitOr           reduce using rule 1 (empty -> .)
    And             reduce using rule 1 (empty -> .)
    Question        reduce using rule 1 (empty -> .)
    Or              reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)
    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    RBracket        reduce using rule 1 (empty -> .)
    Colon           reduce using rule 1 (empty -> .)

    refer_arguments                shift and go to state 44
    empty                          shift and go to state 47

state 18

    (43) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 43 (declaration -> type Identifier Assign expression .)


state 19

    (47) expression -> assignment .

    Semi            reduce using rule 47 (expression -> assignment .)
    RParen          reduce using rule 47 (expression -> assignment .)
    Comma           reduce using rule 47 (expression -> assignment .)
    RBracket        reduce using rule 47 (expression -> assignment .)
    Colon           reduce using rule 47 (expression -> assignment .)


state 20

    (48) assignment -> conditional .

    Semi            reduce using rule 48 (assignment -> conditional .)
    RParen          reduce using rule 48 (assignment -> conditional .)
    Comma           reduce using rule 48 (assignment -> conditional .)
    RBracket        reduce using rule 48 (assignment -> conditional .)
    Colon           reduce using rule 48 (assignment -> conditional .)


state 21

    (68) assignment -> refer . Assign expression
    (87) primary -> refer .

    Assign          shift and go to state 48
    Mul             reduce using rule 87 (primary -> refer .)
    Div             reduce using rule 87 (primary -> refer .)
    Mod             reduce using rule 87 (primary -> refer .)
    Plus            reduce using rule 87 (primary -> refer .)
    Minus           reduce using rule 87 (primary -> refer .)
    Less            reduce using rule 87 (primary -> refer .)
    Greater         reduce using rule 87 (primary -> refer .)
    LessEqual       reduce using rule 87 (primary -> refer .)
    GreaterEqual    reduce using rule 87 (primary -> refer .)
    NotEqual        reduce using rule 87 (primary -> refer .)
    Equal           reduce using rule 87 (primary -> refer .)
    BitAnd          reduce using rule 87 (primary -> refer .)
    Xor             reduce using rule 87 (primary -> refer .)
    BitOr           reduce using rule 87 (primary -> refer .)
    And             reduce using rule 87 (primary -> refer .)
    Question        reduce using rule 87 (primary -> refer .)
    Or              reduce using rule 87 (primary -> refer .)
    Semi            reduce using rule 87 (primary -> refer .)
    RParen          reduce using rule 87 (primary -> refer .)
    Comma           reduce using rule 87 (primary -> refer .)
    RBracket        reduce using rule 87 (primary -> refer .)
    Colon           reduce using rule 87 (primary -> refer .)


state 22

    (49) conditional -> logical_or .
    (85) conditional -> logical_or . Question expression Colon conditional
    (69) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 49 (conditional -> logical_or .)
    RParen          reduce using rule 49 (conditional -> logical_or .)
    Comma           reduce using rule 49 (conditional -> logical_or .)
    RBracket        reduce using rule 49 (conditional -> logical_or .)
    Colon           reduce using rule 49 (conditional -> logical_or .)
    Question        shift and go to state 49
    Or              shift and go to state 50


state 23

    (50) logical_or -> logical_and .
    (70) logical_and -> logical_and . And bit_or

    Question        reduce using rule 50 (logical_or -> logical_and .)
    Or              reduce using rule 50 (logical_or -> logical_and .)
    Semi            reduce using rule 50 (logical_or -> logical_and .)
    RParen          reduce using rule 50 (logical_or -> logical_and .)
    Comma           reduce using rule 50 (logical_or -> logical_and .)
    RBracket        reduce using rule 50 (logical_or -> logical_and .)
    Colon           reduce using rule 50 (logical_or -> logical_and .)
    And             shift and go to state 51


state 24

    (51) logical_and -> bit_or .
    (71) bit_or -> bit_or . BitOr xor

    And             reduce using rule 51 (logical_and -> bit_or .)
    Question        reduce using rule 51 (logical_and -> bit_or .)
    Or              reduce using rule 51 (logical_and -> bit_or .)
    Semi            reduce using rule 51 (logical_and -> bit_or .)
    RParen          reduce using rule 51 (logical_and -> bit_or .)
    Comma           reduce using rule 51 (logical_and -> bit_or .)
    RBracket        reduce using rule 51 (logical_and -> bit_or .)
    Colon           reduce using rule 51 (logical_and -> bit_or .)
    BitOr           shift and go to state 52


state 25

    (52) bit_or -> xor .
    (72) xor -> xor . Xor bit_and

    BitOr           reduce using rule 52 (bit_or -> xor .)
    And             reduce using rule 52 (bit_or -> xor .)
    Question        reduce using rule 52 (bit_or -> xor .)
    Or              reduce using rule 52 (bit_or -> xor .)
    Semi            reduce using rule 52 (bit_or -> xor .)
    RParen          reduce using rule 52 (bit_or -> xor .)
    Comma           reduce using rule 52 (bit_or -> xor .)
    RBracket        reduce using rule 52 (bit_or -> xor .)
    Colon           reduce using rule 52 (bit_or -> xor .)
    Xor             shift and go to state 53


state 26

    (53) xor -> bit_and .
    (73) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 53 (xor -> bit_and .)
    BitOr           reduce using rule 53 (xor -> bit_and .)
    And             reduce using rule 53 (xor -> bit_and .)
    Question        reduce using rule 53 (xor -> bit_and .)
    Or              reduce using rule 53 (xor -> bit_and .)
    Semi            reduce using rule 53 (xor -> bit_and .)
    RParen          reduce using rule 53 (xor -> bit_and .)
    Comma           reduce using rule 53 (xor -> bit_and .)
    RBracket        reduce using rule 53 (xor -> bit_and .)
    Colon           reduce using rule 53 (xor -> bit_and .)
    BitAnd          shift and go to state 54


state 27

    (54) bit_and -> equality .
    (74) equality -> equality . NotEqual relational
    (75) equality -> equality . Equal relational

    BitAnd          reduce using rule 54 (bit_and -> equality .)
    Xor             reduce using rule 54 (bit_and -> equality .)
    BitOr           reduce using rule 54 (bit_and -> equality .)
    And             reduce using rule 54 (bit_and -> equality .)
    Question        reduce using rule 54 (bit_and -> equality .)
    Or              reduce using rule 54 (bit_and -> equality .)
    Semi            reduce using rule 54 (bit_and -> equality .)
    RParen          reduce using rule 54 (bit_and -> equality .)
    Comma           reduce using rule 54 (bit_and -> equality .)
    RBracket        reduce using rule 54 (bit_and -> equality .)
    Colon           reduce using rule 54 (bit_and -> equality .)
    NotEqual        shift and go to state 55
    Equal           shift and go to state 56


state 28

    (55) equality -> relational .
    (76) relational -> relational . Less additive
    (77) relational -> relational . Greater additive
    (78) relational -> relational . LessEqual additive
    (79) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 55 (equality -> relational .)
    Equal           reduce using rule 55 (equality -> relational .)
    BitAnd          reduce using rule 55 (equality -> relational .)
    Xor             reduce using rule 55 (equality -> relational .)
    BitOr           reduce using rule 55 (equality -> relational .)
    And             reduce using rule 55 (equality -> relational .)
    Question        reduce using rule 55 (equality -> relational .)
    Or              reduce using rule 55 (equality -> relational .)
    Semi            reduce using rule 55 (equality -> relational .)
    RParen          reduce using rule 55 (equality -> relational .)
    Comma           reduce using rule 55 (equality -> relational .)
    RBracket        reduce using rule 55 (equality -> relational .)
    Colon           reduce using rule 55 (equality -> relational .)
    Less            shift and go to state 57
    Greater         shift and go to state 58
    LessEqual       shift and go to state 59
    GreaterEqual    shift and go to state 60


state 29

    (56) relational -> additive .
    (80) additive -> additive . Plus multiplicative
    (81) additive -> additive . Minus multiplicative

    Less            reduce using rule 56 (relational -> additive .)
    Greater         reduce using rule 56 (relational -> additive .)
    LessEqual       reduce using rule 56 (relational -> additive .)
    GreaterEqual    reduce using rule 56 (relational -> additive .)
    NotEqual        reduce using rule 56 (relational -> additive .)
    Equal           reduce using rule 56 (relational -> additive .)
    BitAnd          reduce using rule 56 (relational -> additive .)
    Xor             reduce using rule 56 (relational -> additive .)
    BitOr           reduce using rule 56 (relational -> additive .)
    And             reduce using rule 56 (relational -> additive .)
    Question        reduce using rule 56 (relational -> additive .)
    Or              reduce using rule 56 (relational -> additive .)
    Semi            reduce using rule 56 (relational -> additive .)
    RParen          reduce using rule 56 (relational -> additive .)
    Comma           reduce using rule 56 (relational -> additive .)
    RBracket        reduce using rule 56 (relational -> additive .)
    Colon           reduce using rule 56 (relational -> additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 30

    (57) additive -> multiplicative .
    (82) multiplicative -> multiplicative . Mul unary
    (83) multiplicative -> multiplicative . Div unary
    (84) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 57 (additive -> multiplicative .)
    Minus           reduce using rule 57 (additive -> multiplicative .)
    Less            reduce using rule 57 (additive -> multiplicative .)
    Greater         reduce using rule 57 (additive -> multiplicative .)
    LessEqual       reduce using rule 57 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 57 (additive -> multiplicative .)
    NotEqual        reduce using rule 57 (additive -> multiplicative .)
    Equal           reduce using rule 57 (additive -> multiplicative .)
    BitAnd          reduce using rule 57 (additive -> multiplicative .)
    Xor             reduce using rule 57 (additive -> multiplicative .)
    BitOr           reduce using rule 57 (additive -> multiplicative .)
    And             reduce using rule 57 (additive -> multiplicative .)
    Question        reduce using rule 57 (additive -> multiplicative .)
    Or              reduce using rule 57 (additive -> multiplicative .)
    Semi            reduce using rule 57 (additive -> multiplicative .)
    RParen          reduce using rule 57 (additive -> multiplicative .)
    Comma           reduce using rule 57 (additive -> multiplicative .)
    RBracket        reduce using rule 57 (additive -> multiplicative .)
    Colon           reduce using rule 57 (additive -> multiplicative .)
    Mul             shift and go to state 63
    Div             shift and go to state 64
    Mod             shift and go to state 65


state 31

    (62) unary -> Minus . unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    unary                          shift and go to state 66
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 32

    (58) multiplicative -> unary .

    Mul             reduce using rule 58 (multiplicative -> unary .)
    Div             reduce using rule 58 (multiplicative -> unary .)
    Mod             reduce using rule 58 (multiplicative -> unary .)
    Plus            reduce using rule 58 (multiplicative -> unary .)
    Minus           reduce using rule 58 (multiplicative -> unary .)
    Less            reduce using rule 58 (multiplicative -> unary .)
    Greater         reduce using rule 58 (multiplicative -> unary .)
    LessEqual       reduce using rule 58 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 58 (multiplicative -> unary .)
    NotEqual        reduce using rule 58 (multiplicative -> unary .)
    Equal           reduce using rule 58 (multiplicative -> unary .)
    BitAnd          reduce using rule 58 (multiplicative -> unary .)
    Xor             reduce using rule 58 (multiplicative -> unary .)
    BitOr           reduce using rule 58 (multiplicative -> unary .)
    And             reduce using rule 58 (multiplicative -> unary .)
    Question        reduce using rule 58 (multiplicative -> unary .)
    Or              reduce using rule 58 (multiplicative -> unary .)
    Semi            reduce using rule 58 (multiplicative -> unary .)
    RParen          reduce using rule 58 (multiplicative -> unary .)
    Comma           reduce using rule 58 (multiplicative -> unary .)
    RBracket        reduce using rule 58 (multiplicative -> unary .)
    Colon           reduce using rule 58 (multiplicative -> unary .)


state 33

    (59) unary -> postfix .

    Mul             reduce using rule 59 (unary -> postfix .)
    Div             reduce using rule 59 (unary -> postfix .)
    Mod             reduce using rule 59 (unary -> postfix .)
    Plus            reduce using rule 59 (unary -> postfix .)
    Minus           reduce using rule 59 (unary -> postfix .)
    Less            reduce using rule 59 (unary -> postfix .)
    Greater         reduce using rule 59 (unary -> postfix .)
    LessEqual       reduce using rule 59 (unary -> postfix .)
    GreaterEqual    reduce using rule 59 (unary -> postfix .)
    NotEqual        reduce using rule 59 (unary -> postfix .)
    Equal           reduce using rule 59 (unary -> postfix .)
    BitAnd          reduce using rule 59 (unary -> postfix .)
    Xor             reduce using rule 59 (unary -> postfix .)
    BitOr           reduce using rule 59 (unary -> postfix .)
    And             reduce using rule 59 (unary -> postfix .)
    Question        reduce using rule 59 (unary -> postfix .)
    Or              reduce using rule 59 (unary -> postfix .)
    Semi            reduce using rule 59 (unary -> postfix .)
    RParen          reduce using rule 59 (unary -> postfix .)
    Comma           reduce using rule 59 (unary -> postfix .)
    RBracket        reduce using rule 59 (unary -> postfix .)
    Colon           reduce using rule 59 (unary -> postfix .)


state 34

    (63) unary -> BitNot . unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    unary                          shift and go to state 69
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 35

    (64) unary -> Not . unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    unary                          shift and go to state 70
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 36

    (60) postfix -> primary .

    Mul             reduce using rule 60 (postfix -> primary .)
    Div             reduce using rule 60 (postfix -> primary .)
    Mod             reduce using rule 60 (postfix -> primary .)
    Plus            reduce using rule 60 (postfix -> primary .)
    Minus           reduce using rule 60 (postfix -> primary .)
    Less            reduce using rule 60 (postfix -> primary .)
    Greater         reduce using rule 60 (postfix -> primary .)
    LessEqual       reduce using rule 60 (postfix -> primary .)
    GreaterEqual    reduce using rule 60 (postfix -> primary .)
    NotEqual        reduce using rule 60 (postfix -> primary .)
    Equal           reduce using rule 60 (postfix -> primary .)
    BitAnd          reduce using rule 60 (postfix -> primary .)
    Xor             reduce using rule 60 (postfix -> primary .)
    BitOr           reduce using rule 60 (postfix -> primary .)
    And             reduce using rule 60 (postfix -> primary .)
    Question        reduce using rule 60 (postfix -> primary .)
    Or              reduce using rule 60 (postfix -> primary .)
    Semi            reduce using rule 60 (postfix -> primary .)
    RParen          reduce using rule 60 (postfix -> primary .)
    Comma           reduce using rule 60 (postfix -> primary .)
    RBracket        reduce using rule 60 (postfix -> primary .)
    Colon           reduce using rule 60 (postfix -> primary .)


state 37

    (88) primary -> LParen . expression RParen
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 71
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 38

    (86) primary -> Integer .

    Mul             reduce using rule 86 (primary -> Integer .)
    Div             reduce using rule 86 (primary -> Integer .)
    Mod             reduce using rule 86 (primary -> Integer .)
    Plus            reduce using rule 86 (primary -> Integer .)
    Minus           reduce using rule 86 (primary -> Integer .)
    Less            reduce using rule 86 (primary -> Integer .)
    Greater         reduce using rule 86 (primary -> Integer .)
    LessEqual       reduce using rule 86 (primary -> Integer .)
    GreaterEqual    reduce using rule 86 (primary -> Integer .)
    NotEqual        reduce using rule 86 (primary -> Integer .)
    Equal           reduce using rule 86 (primary -> Integer .)
    BitAnd          reduce using rule 86 (primary -> Integer .)
    Xor             reduce using rule 86 (primary -> Integer .)
    BitOr           reduce using rule 86 (primary -> Integer .)
    And             reduce using rule 86 (primary -> Integer .)
    Question        reduce using rule 86 (primary -> Integer .)
    Or              reduce using rule 86 (primary -> Integer .)
    Semi            reduce using rule 86 (primary -> Integer .)
    RParen          reduce using rule 86 (primary -> Integer .)
    Comma           reduce using rule 86 (primary -> Integer .)
    RBracket        reduce using rule 86 (primary -> Integer .)
    Colon           reduce using rule 86 (primary -> Integer .)


state 39

    (12) parameter -> type . Identifier

    Identifier      shift and go to state 72


state 40

    (7) function -> type Identifier LParen parameter_list . RParen LBrace block RBrace
    (8) function -> type Identifier LParen parameter_list . RParen Semi

    RParen          shift and go to state 73


state 41

    (9) parameter_list -> parameter . Comma parameter_list
    (10) parameter_list -> parameter .

    Comma           shift and go to state 74
    RParen          reduce using rule 10 (parameter_list -> parameter .)


state 42

    (11) parameter_list -> empty .

    RParen          reduce using rule 11 (parameter_list -> empty .)


state 43

    (42) array -> LBracket Integer . RBracket array

    RBracket        shift and go to state 75


state 44

    (65) refer -> Identifier refer_arguments .

    Assign          reduce using rule 65 (refer -> Identifier refer_arguments .)
    Mul             reduce using rule 65 (refer -> Identifier refer_arguments .)
    Div             reduce using rule 65 (refer -> Identifier refer_arguments .)
    Mod             reduce using rule 65 (refer -> Identifier refer_arguments .)
    Plus            reduce using rule 65 (refer -> Identifier refer_arguments .)
    Minus           reduce using rule 65 (refer -> Identifier refer_arguments .)
    Less            reduce using rule 65 (refer -> Identifier refer_arguments .)
    Greater         reduce using rule 65 (refer -> Identifier refer_arguments .)
    LessEqual       reduce using rule 65 (refer -> Identifier refer_arguments .)
    GreaterEqual    reduce using rule 65 (refer -> Identifier refer_arguments .)
    NotEqual        reduce using rule 65 (refer -> Identifier refer_arguments .)
    Equal           reduce using rule 65 (refer -> Identifier refer_arguments .)
    BitAnd          reduce using rule 65 (refer -> Identifier refer_arguments .)
    Xor             reduce using rule 65 (refer -> Identifier refer_arguments .)
    BitOr           reduce using rule 65 (refer -> Identifier refer_arguments .)
    And             reduce using rule 65 (refer -> Identifier refer_arguments .)
    Question        reduce using rule 65 (refer -> Identifier refer_arguments .)
    Or              reduce using rule 65 (refer -> Identifier refer_arguments .)
    Semi            reduce using rule 65 (refer -> Identifier refer_arguments .)
    RParen          reduce using rule 65 (refer -> Identifier refer_arguments .)
    Comma           reduce using rule 65 (refer -> Identifier refer_arguments .)
    RBracket        reduce using rule 65 (refer -> Identifier refer_arguments .)
    Colon           reduce using rule 65 (refer -> Identifier refer_arguments .)


state 45

    (61) postfix -> Identifier LParen . expression_list RParen
    (44) expression_list -> . expression Comma expression_list
    (45) expression_list -> . expression
    (46) expression_list -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression_list                shift and go to state 76
    expression                     shift and go to state 77
    empty                          shift and go to state 78
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 46

    (66) refer_arguments -> LBracket . expression RBracket refer_arguments
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 79
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 47

    (67) refer_arguments -> empty .

    Assign          reduce using rule 67 (refer_arguments -> empty .)
    Mul             reduce using rule 67 (refer_arguments -> empty .)
    Div             reduce using rule 67 (refer_arguments -> empty .)
    Mod             reduce using rule 67 (refer_arguments -> empty .)
    Plus            reduce using rule 67 (refer_arguments -> empty .)
    Minus           reduce using rule 67 (refer_arguments -> empty .)
    Less            reduce using rule 67 (refer_arguments -> empty .)
    Greater         reduce using rule 67 (refer_arguments -> empty .)
    LessEqual       reduce using rule 67 (refer_arguments -> empty .)
    GreaterEqual    reduce using rule 67 (refer_arguments -> empty .)
    NotEqual        reduce using rule 67 (refer_arguments -> empty .)
    Equal           reduce using rule 67 (refer_arguments -> empty .)
    BitAnd          reduce using rule 67 (refer_arguments -> empty .)
    Xor             reduce using rule 67 (refer_arguments -> empty .)
    BitOr           reduce using rule 67 (refer_arguments -> empty .)
    And             reduce using rule 67 (refer_arguments -> empty .)
    Question        reduce using rule 67 (refer_arguments -> empty .)
    Or              reduce using rule 67 (refer_arguments -> empty .)
    Semi            reduce using rule 67 (refer_arguments -> empty .)
    RParen          reduce using rule 67 (refer_arguments -> empty .)
    Comma           reduce using rule 67 (refer_arguments -> empty .)
    RBracket        reduce using rule 67 (refer_arguments -> empty .)
    Colon           reduce using rule 67 (refer_arguments -> empty .)


state 48

    (68) assignment -> refer Assign . expression
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    refer                          shift and go to state 21
    expression                     shift and go to state 80
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 49

    (85) conditional -> logical_or Question . expression Colon conditional
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    logical_or                     shift and go to state 22
    expression                     shift and go to state 81
    conditional                    shift and go to state 20
    assignment                     shift and go to state 19
    refer                          shift and go to state 21
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 50

    (69) logical_or -> logical_or Or . logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    logical_and                    shift and go to state 82
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 51

    (70) logical_and -> logical_and And . bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    bit_or                         shift and go to state 83
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 52

    (71) bit_or -> bit_or BitOr . xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    xor                            shift and go to state 84
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 53

    (72) xor -> xor Xor . bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    bit_and                        shift and go to state 85
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 54

    (73) bit_and -> bit_and BitAnd . equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    equality                       shift and go to state 86
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 55

    (74) equality -> equality NotEqual . relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    relational                     shift and go to state 87
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 56

    (75) equality -> equality Equal . relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    relational                     shift and go to state 88
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 57

    (76) relational -> relational Less . additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    additive                       shift and go to state 89
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 58

    (77) relational -> relational Greater . additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    additive                       shift and go to state 90
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 59

    (78) relational -> relational LessEqual . additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    additive                       shift and go to state 91
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 60

    (79) relational -> relational GreaterEqual . additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    additive                       shift and go to state 92
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 61

    (80) additive -> additive Plus . multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    multiplicative                 shift and go to state 93
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 62

    (81) additive -> additive Minus . multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    multiplicative                 shift and go to state 94
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 63

    (82) multiplicative -> multiplicative Mul . unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    unary                          shift and go to state 95
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 64

    (83) multiplicative -> multiplicative Div . unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    unary                          shift and go to state 96
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 65

    (84) multiplicative -> multiplicative Mod . unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    unary                          shift and go to state 97
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 66

    (62) unary -> Minus unary .

    Mul             reduce using rule 62 (unary -> Minus unary .)
    Div             reduce using rule 62 (unary -> Minus unary .)
    Mod             reduce using rule 62 (unary -> Minus unary .)
    Plus            reduce using rule 62 (unary -> Minus unary .)
    Minus           reduce using rule 62 (unary -> Minus unary .)
    Less            reduce using rule 62 (unary -> Minus unary .)
    Greater         reduce using rule 62 (unary -> Minus unary .)
    LessEqual       reduce using rule 62 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 62 (unary -> Minus unary .)
    NotEqual        reduce using rule 62 (unary -> Minus unary .)
    Equal           reduce using rule 62 (unary -> Minus unary .)
    BitAnd          reduce using rule 62 (unary -> Minus unary .)
    Xor             reduce using rule 62 (unary -> Minus unary .)
    BitOr           reduce using rule 62 (unary -> Minus unary .)
    And             reduce using rule 62 (unary -> Minus unary .)
    Question        reduce using rule 62 (unary -> Minus unary .)
    Or              reduce using rule 62 (unary -> Minus unary .)
    Semi            reduce using rule 62 (unary -> Minus unary .)
    RParen          reduce using rule 62 (unary -> Minus unary .)
    Comma           reduce using rule 62 (unary -> Minus unary .)
    RBracket        reduce using rule 62 (unary -> Minus unary .)
    Colon           reduce using rule 62 (unary -> Minus unary .)


state 67

    (61) postfix -> Identifier . LParen expression_list RParen
    (65) refer -> Identifier . refer_arguments
    (66) refer_arguments -> . LBracket expression RBracket refer_arguments
    (67) refer_arguments -> . empty
    (1) empty -> .

    LParen          shift and go to state 45
    LBracket        shift and go to state 46
    Mul             reduce using rule 1 (empty -> .)
    Div             reduce using rule 1 (empty -> .)
    Mod             reduce using rule 1 (empty -> .)
    Plus            reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    Less            reduce using rule 1 (empty -> .)
    Greater         reduce using rule 1 (empty -> .)
    LessEqual       reduce using rule 1 (empty -> .)
    GreaterEqual    reduce using rule 1 (empty -> .)
    NotEqual        reduce using rule 1 (empty -> .)
    Equal           reduce using rule 1 (empty -> .)
    BitAnd          reduce using rule 1 (empty -> .)
    Xor             reduce using rule 1 (empty -> .)
    BitOr           reduce using rule 1 (empty -> .)
    And             reduce using rule 1 (empty -> .)
    Question        reduce using rule 1 (empty -> .)
    Or              reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)
    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    RBracket        reduce using rule 1 (empty -> .)
    Colon           reduce using rule 1 (empty -> .)

    refer_arguments                shift and go to state 44
    empty                          shift and go to state 47

state 68

    (87) primary -> refer .

    Mul             reduce using rule 87 (primary -> refer .)
    Div             reduce using rule 87 (primary -> refer .)
    Mod             reduce using rule 87 (primary -> refer .)
    Plus            reduce using rule 87 (primary -> refer .)
    Minus           reduce using rule 87 (primary -> refer .)
    Less            reduce using rule 87 (primary -> refer .)
    Greater         reduce using rule 87 (primary -> refer .)
    LessEqual       reduce using rule 87 (primary -> refer .)
    GreaterEqual    reduce using rule 87 (primary -> refer .)
    NotEqual        reduce using rule 87 (primary -> refer .)
    Equal           reduce using rule 87 (primary -> refer .)
    BitAnd          reduce using rule 87 (primary -> refer .)
    Xor             reduce using rule 87 (primary -> refer .)
    BitOr           reduce using rule 87 (primary -> refer .)
    And             reduce using rule 87 (primary -> refer .)
    Question        reduce using rule 87 (primary -> refer .)
    Or              reduce using rule 87 (primary -> refer .)
    Semi            reduce using rule 87 (primary -> refer .)
    RParen          reduce using rule 87 (primary -> refer .)
    Comma           reduce using rule 87 (primary -> refer .)
    RBracket        reduce using rule 87 (primary -> refer .)
    Colon           reduce using rule 87 (primary -> refer .)


state 69

    (63) unary -> BitNot unary .

    Mul             reduce using rule 63 (unary -> BitNot unary .)
    Div             reduce using rule 63 (unary -> BitNot unary .)
    Mod             reduce using rule 63 (unary -> BitNot unary .)
    Plus            reduce using rule 63 (unary -> BitNot unary .)
    Minus           reduce using rule 63 (unary -> BitNot unary .)
    Less            reduce using rule 63 (unary -> BitNot unary .)
    Greater         reduce using rule 63 (unary -> BitNot unary .)
    LessEqual       reduce using rule 63 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 63 (unary -> BitNot unary .)
    NotEqual        reduce using rule 63 (unary -> BitNot unary .)
    Equal           reduce using rule 63 (unary -> BitNot unary .)
    BitAnd          reduce using rule 63 (unary -> BitNot unary .)
    Xor             reduce using rule 63 (unary -> BitNot unary .)
    BitOr           reduce using rule 63 (unary -> BitNot unary .)
    And             reduce using rule 63 (unary -> BitNot unary .)
    Question        reduce using rule 63 (unary -> BitNot unary .)
    Or              reduce using rule 63 (unary -> BitNot unary .)
    Semi            reduce using rule 63 (unary -> BitNot unary .)
    RParen          reduce using rule 63 (unary -> BitNot unary .)
    Comma           reduce using rule 63 (unary -> BitNot unary .)
    RBracket        reduce using rule 63 (unary -> BitNot unary .)
    Colon           reduce using rule 63 (unary -> BitNot unary .)


state 70

    (64) unary -> Not unary .

    Mul             reduce using rule 64 (unary -> Not unary .)
    Div             reduce using rule 64 (unary -> Not unary .)
    Mod             reduce using rule 64 (unary -> Not unary .)
    Plus            reduce using rule 64 (unary -> Not unary .)
    Minus           reduce using rule 64 (unary -> Not unary .)
    Less            reduce using rule 64 (unary -> Not unary .)
    Greater         reduce using rule 64 (unary -> Not unary .)
    LessEqual       reduce using rule 64 (unary -> Not unary .)
    GreaterEqual    reduce using rule 64 (unary -> Not unary .)
    NotEqual        reduce using rule 64 (unary -> Not unary .)
    Equal           reduce using rule 64 (unary -> Not unary .)
    BitAnd          reduce using rule 64 (unary -> Not unary .)
    Xor             reduce using rule 64 (unary -> Not unary .)
    BitOr           reduce using rule 64 (unary -> Not unary .)
    And             reduce using rule 64 (unary -> Not unary .)
    Question        reduce using rule 64 (unary -> Not unary .)
    Or              reduce using rule 64 (unary -> Not unary .)
    Semi            reduce using rule 64 (unary -> Not unary .)
    RParen          reduce using rule 64 (unary -> Not unary .)
    Comma           reduce using rule 64 (unary -> Not unary .)
    RBracket        reduce using rule 64 (unary -> Not unary .)
    Colon           reduce using rule 64 (unary -> Not unary .)


state 71

    (88) primary -> LParen expression . RParen

    RParen          shift and go to state 98


state 72

    (12) parameter -> type Identifier .

    Comma           reduce using rule 12 (parameter -> type Identifier .)
    RParen          reduce using rule 12 (parameter -> type Identifier .)


state 73

    (7) function -> type Identifier LParen parameter_list RParen . LBrace block RBrace
    (8) function -> type Identifier LParen parameter_list RParen . Semi

    LBrace          shift and go to state 99
    Semi            shift and go to state 100


state 74

    (9) parameter_list -> parameter Comma . parameter_list
    (9) parameter_list -> . parameter Comma parameter_list
    (10) parameter_list -> . parameter
    (11) parameter_list -> . empty
    (12) parameter -> . type Identifier
    (1) empty -> .
    (2) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    parameter                      shift and go to state 41
    parameter_list                 shift and go to state 101
    empty                          shift and go to state 42
    type                           shift and go to state 39

state 75

    (42) array -> LBracket Integer RBracket . array
    (41) array -> . empty
    (42) array -> . LBracket Integer RBracket array
    (1) empty -> .

    LBracket        shift and go to state 16
    Semi            reduce using rule 1 (empty -> .)

    array                          shift and go to state 102
    empty                          shift and go to state 15

state 76

    (61) postfix -> Identifier LParen expression_list . RParen

    RParen          shift and go to state 103


state 77

    (44) expression_list -> expression . Comma expression_list
    (45) expression_list -> expression .

    Comma           shift and go to state 104
    RParen          reduce using rule 45 (expression_list -> expression .)


state 78

    (46) expression_list -> empty .

    RParen          reduce using rule 46 (expression_list -> empty .)


state 79

    (66) refer_arguments -> LBracket expression . RBracket refer_arguments

    RBracket        shift and go to state 105


state 80

    (68) assignment -> refer Assign expression .

    Semi            reduce using rule 68 (assignment -> refer Assign expression .)
    RParen          reduce using rule 68 (assignment -> refer Assign expression .)
    Comma           reduce using rule 68 (assignment -> refer Assign expression .)
    RBracket        reduce using rule 68 (assignment -> refer Assign expression .)
    Colon           reduce using rule 68 (assignment -> refer Assign expression .)


state 81

    (85) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 106


state 82

    (69) logical_or -> logical_or Or logical_and .
    (70) logical_and -> logical_and . And bit_or

    Question        reduce using rule 69 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 69 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 69 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 69 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 69 (logical_or -> logical_or Or logical_and .)
    RBracket        reduce using rule 69 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 69 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 51


state 83

    (70) logical_and -> logical_and And bit_or .
    (71) bit_or -> bit_or . BitOr xor

    And             reduce using rule 70 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 70 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 70 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 70 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 70 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 70 (logical_and -> logical_and And bit_or .)
    RBracket        reduce using rule 70 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 70 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 52


state 84

    (71) bit_or -> bit_or BitOr xor .
    (72) xor -> xor . Xor bit_and

    BitOr           reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    RBracket        reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 71 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 53


state 85

    (72) xor -> xor Xor bit_and .
    (73) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 72 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 72 (xor -> xor Xor bit_and .)
    And             reduce using rule 72 (xor -> xor Xor bit_and .)
    Question        reduce using rule 72 (xor -> xor Xor bit_and .)
    Or              reduce using rule 72 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 72 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 72 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 72 (xor -> xor Xor bit_and .)
    RBracket        reduce using rule 72 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 72 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 54


state 86

    (73) bit_and -> bit_and BitAnd equality .
    (74) equality -> equality . NotEqual relational
    (75) equality -> equality . Equal relational

    BitAnd          reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    RBracket        reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 73 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 55
    Equal           shift and go to state 56


state 87

    (74) equality -> equality NotEqual relational .
    (76) relational -> relational . Less additive
    (77) relational -> relational . Greater additive
    (78) relational -> relational . LessEqual additive
    (79) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 74 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 74 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 74 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 74 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 74 (equality -> equality NotEqual relational .)
    And             reduce using rule 74 (equality -> equality NotEqual relational .)
    Question        reduce using rule 74 (equality -> equality NotEqual relational .)
    Or              reduce using rule 74 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 74 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 74 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 74 (equality -> equality NotEqual relational .)
    RBracket        reduce using rule 74 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 74 (equality -> equality NotEqual relational .)
    Less            shift and go to state 57
    Greater         shift and go to state 58
    LessEqual       shift and go to state 59
    GreaterEqual    shift and go to state 60


state 88

    (75) equality -> equality Equal relational .
    (76) relational -> relational . Less additive
    (77) relational -> relational . Greater additive
    (78) relational -> relational . LessEqual additive
    (79) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 75 (equality -> equality Equal relational .)
    Equal           reduce using rule 75 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 75 (equality -> equality Equal relational .)
    Xor             reduce using rule 75 (equality -> equality Equal relational .)
    BitOr           reduce using rule 75 (equality -> equality Equal relational .)
    And             reduce using rule 75 (equality -> equality Equal relational .)
    Question        reduce using rule 75 (equality -> equality Equal relational .)
    Or              reduce using rule 75 (equality -> equality Equal relational .)
    Semi            reduce using rule 75 (equality -> equality Equal relational .)
    RParen          reduce using rule 75 (equality -> equality Equal relational .)
    Comma           reduce using rule 75 (equality -> equality Equal relational .)
    RBracket        reduce using rule 75 (equality -> equality Equal relational .)
    Colon           reduce using rule 75 (equality -> equality Equal relational .)
    Less            shift and go to state 57
    Greater         shift and go to state 58
    LessEqual       shift and go to state 59
    GreaterEqual    shift and go to state 60


state 89

    (76) relational -> relational Less additive .
    (80) additive -> additive . Plus multiplicative
    (81) additive -> additive . Minus multiplicative

    Less            reduce using rule 76 (relational -> relational Less additive .)
    Greater         reduce using rule 76 (relational -> relational Less additive .)
    LessEqual       reduce using rule 76 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 76 (relational -> relational Less additive .)
    NotEqual        reduce using rule 76 (relational -> relational Less additive .)
    Equal           reduce using rule 76 (relational -> relational Less additive .)
    BitAnd          reduce using rule 76 (relational -> relational Less additive .)
    Xor             reduce using rule 76 (relational -> relational Less additive .)
    BitOr           reduce using rule 76 (relational -> relational Less additive .)
    And             reduce using rule 76 (relational -> relational Less additive .)
    Question        reduce using rule 76 (relational -> relational Less additive .)
    Or              reduce using rule 76 (relational -> relational Less additive .)
    Semi            reduce using rule 76 (relational -> relational Less additive .)
    RParen          reduce using rule 76 (relational -> relational Less additive .)
    Comma           reduce using rule 76 (relational -> relational Less additive .)
    RBracket        reduce using rule 76 (relational -> relational Less additive .)
    Colon           reduce using rule 76 (relational -> relational Less additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 90

    (77) relational -> relational Greater additive .
    (80) additive -> additive . Plus multiplicative
    (81) additive -> additive . Minus multiplicative

    Less            reduce using rule 77 (relational -> relational Greater additive .)
    Greater         reduce using rule 77 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 77 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 77 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 77 (relational -> relational Greater additive .)
    Equal           reduce using rule 77 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 77 (relational -> relational Greater additive .)
    Xor             reduce using rule 77 (relational -> relational Greater additive .)
    BitOr           reduce using rule 77 (relational -> relational Greater additive .)
    And             reduce using rule 77 (relational -> relational Greater additive .)
    Question        reduce using rule 77 (relational -> relational Greater additive .)
    Or              reduce using rule 77 (relational -> relational Greater additive .)
    Semi            reduce using rule 77 (relational -> relational Greater additive .)
    RParen          reduce using rule 77 (relational -> relational Greater additive .)
    Comma           reduce using rule 77 (relational -> relational Greater additive .)
    RBracket        reduce using rule 77 (relational -> relational Greater additive .)
    Colon           reduce using rule 77 (relational -> relational Greater additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 91

    (78) relational -> relational LessEqual additive .
    (80) additive -> additive . Plus multiplicative
    (81) additive -> additive . Minus multiplicative

    Less            reduce using rule 78 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 78 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 78 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 78 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 78 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 78 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 78 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 78 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 78 (relational -> relational LessEqual additive .)
    And             reduce using rule 78 (relational -> relational LessEqual additive .)
    Question        reduce using rule 78 (relational -> relational LessEqual additive .)
    Or              reduce using rule 78 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 78 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 78 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 78 (relational -> relational LessEqual additive .)
    RBracket        reduce using rule 78 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 78 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 92

    (79) relational -> relational GreaterEqual additive .
    (80) additive -> additive . Plus multiplicative
    (81) additive -> additive . Minus multiplicative

    Less            reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 79 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 79 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 79 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 79 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 79 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 79 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 79 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 79 (relational -> relational GreaterEqual additive .)
    RBracket        reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 79 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 93

    (80) additive -> additive Plus multiplicative .
    (82) multiplicative -> multiplicative . Mul unary
    (83) multiplicative -> multiplicative . Div unary
    (84) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 80 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 80 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 80 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 80 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 80 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 80 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 80 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 80 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 80 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 80 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 80 (additive -> additive Plus multiplicative .)
    And             reduce using rule 80 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 80 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 80 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 80 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 80 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 80 (additive -> additive Plus multiplicative .)
    RBracket        reduce using rule 80 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 80 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 63
    Div             shift and go to state 64
    Mod             shift and go to state 65


state 94

    (81) additive -> additive Minus multiplicative .
    (82) multiplicative -> multiplicative . Mul unary
    (83) multiplicative -> multiplicative . Div unary
    (84) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 81 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 81 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 81 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 81 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 81 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 81 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 81 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 81 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 81 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 81 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 81 (additive -> additive Minus multiplicative .)
    And             reduce using rule 81 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 81 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 81 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 81 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 81 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 81 (additive -> additive Minus multiplicative .)
    RBracket        reduce using rule 81 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 81 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 63
    Div             shift and go to state 64
    Mod             shift and go to state 65


state 95

    (82) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    RBracket        reduce using rule 82 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 82 (multiplicative -> multiplicative Mul unary .)


state 96

    (83) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    RBracket        reduce using rule 83 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 83 (multiplicative -> multiplicative Div unary .)


state 97

    (84) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    RBracket        reduce using rule 84 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 84 (multiplicative -> multiplicative Mod unary .)


state 98

    (88) primary -> LParen expression RParen .

    Mul             reduce using rule 88 (primary -> LParen expression RParen .)
    Div             reduce using rule 88 (primary -> LParen expression RParen .)
    Mod             reduce using rule 88 (primary -> LParen expression RParen .)
    Plus            reduce using rule 88 (primary -> LParen expression RParen .)
    Minus           reduce using rule 88 (primary -> LParen expression RParen .)
    Less            reduce using rule 88 (primary -> LParen expression RParen .)
    Greater         reduce using rule 88 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 88 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 88 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 88 (primary -> LParen expression RParen .)
    Equal           reduce using rule 88 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 88 (primary -> LParen expression RParen .)
    Xor             reduce using rule 88 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 88 (primary -> LParen expression RParen .)
    And             reduce using rule 88 (primary -> LParen expression RParen .)
    Question        reduce using rule 88 (primary -> LParen expression RParen .)
    Or              reduce using rule 88 (primary -> LParen expression RParen .)
    Semi            reduce using rule 88 (primary -> LParen expression RParen .)
    RParen          reduce using rule 88 (primary -> LParen expression RParen .)
    Comma           reduce using rule 88 (primary -> LParen expression RParen .)
    RBracket        reduce using rule 88 (primary -> LParen expression RParen .)
    Colon           reduce using rule 88 (primary -> LParen expression RParen .)


state 99

    (7) function -> type Identifier LParen parameter_list RParen LBrace . block RBrace
    (13) block -> . block block_item
    (14) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 107
    empty                          shift and go to state 108

state 100

    (8) function -> type Identifier LParen parameter_list RParen Semi .

    Int             reduce using rule 8 (function -> type Identifier LParen parameter_list RParen Semi .)
    $end            reduce using rule 8 (function -> type Identifier LParen parameter_list RParen Semi .)


state 101

    (9) parameter_list -> parameter Comma parameter_list .

    RParen          reduce using rule 9 (parameter_list -> parameter Comma parameter_list .)


state 102

    (42) array -> LBracket Integer RBracket array .

    Semi            reduce using rule 42 (array -> LBracket Integer RBracket array .)


state 103

    (61) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    RBracket        reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 61 (postfix -> Identifier LParen expression_list RParen .)


state 104

    (44) expression_list -> expression Comma . expression_list
    (44) expression_list -> . expression Comma expression_list
    (45) expression_list -> . expression
    (46) expression_list -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 77
    expression_list                shift and go to state 109
    empty                          shift and go to state 78
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 105

    (66) refer_arguments -> LBracket expression RBracket . refer_arguments
    (66) refer_arguments -> . LBracket expression RBracket refer_arguments
    (67) refer_arguments -> . empty
    (1) empty -> .

    LBracket        shift and go to state 46
    Assign          reduce using rule 1 (empty -> .)
    Mul             reduce using rule 1 (empty -> .)
    Div             reduce using rule 1 (empty -> .)
    Mod             reduce using rule 1 (empty -> .)
    Plus            reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    Less            reduce using rule 1 (empty -> .)
    Greater         reduce using rule 1 (empty -> .)
    LessEqual       reduce using rule 1 (empty -> .)
    GreaterEqual    reduce using rule 1 (empty -> .)
    NotEqual        reduce using rule 1 (empty -> .)
    Equal           reduce using rule 1 (empty -> .)
    BitAnd          reduce using rule 1 (empty -> .)
    Xor             reduce using rule 1 (empty -> .)
    BitOr           reduce using rule 1 (empty -> .)
    And             reduce using rule 1 (empty -> .)
    Question        reduce using rule 1 (empty -> .)
    Or              reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)
    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    RBracket        reduce using rule 1 (empty -> .)
    Colon           reduce using rule 1 (empty -> .)

    refer_arguments                shift and go to state 110
    empty                          shift and go to state 47

state 106

    (85) conditional -> logical_or Question expression Colon . conditional
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen
    (65) refer -> . Identifier refer_arguments

    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Identifier      shift and go to state 67
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    logical_or                     shift and go to state 22
    conditional                    shift and go to state 111
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36
    refer                          shift and go to state 68

state 107

    (7) function -> type Identifier LParen parameter_list RParen LBrace block . RBrace
    (13) block -> block . block_item
    (15) block_item -> . statement
    (16) block_item -> . declaration Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (40) declaration -> . type Identifier array
    (43) declaration -> . type Identifier Assign expression
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (2) type -> . Int
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    RBrace          shift and go to state 114
    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Int             shift and go to state 7
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    type                           shift and go to state 112
    block_item                     shift and go to state 115
    statement                      shift and go to state 116
    declaration                    shift and go to state 117
    statement_matched              shift and go to state 118
    statement_unmatched            shift and go to state 119
    expression                     shift and go to state 120
    opt_expression                 shift and go to state 124
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 108

    (14) block -> empty .

    RBrace          reduce using rule 14 (block -> empty .)
    If              reduce using rule 14 (block -> empty .)
    While           reduce using rule 14 (block -> empty .)
    For             reduce using rule 14 (block -> empty .)
    Do              reduce using rule 14 (block -> empty .)
    Continue        reduce using rule 14 (block -> empty .)
    Return          reduce using rule 14 (block -> empty .)
    LBrace          reduce using rule 14 (block -> empty .)
    Break           reduce using rule 14 (block -> empty .)
    Int             reduce using rule 14 (block -> empty .)
    Identifier      reduce using rule 14 (block -> empty .)
    Minus           reduce using rule 14 (block -> empty .)
    BitNot          reduce using rule 14 (block -> empty .)
    Not             reduce using rule 14 (block -> empty .)
    Integer         reduce using rule 14 (block -> empty .)
    LParen          reduce using rule 14 (block -> empty .)
    Semi            reduce using rule 14 (block -> empty .)


state 109

    (44) expression_list -> expression Comma expression_list .

    RParen          reduce using rule 44 (expression_list -> expression Comma expression_list .)


state 110

    (66) refer_arguments -> LBracket expression RBracket refer_arguments .

    Assign          reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Mul             reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Div             reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Mod             reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Plus            reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Minus           reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Less            reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Greater         reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    LessEqual       reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    GreaterEqual    reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    NotEqual        reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Equal           reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    BitAnd          reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Xor             reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    BitOr           reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    And             reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Question        reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Or              reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Semi            reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    RParen          reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Comma           reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    RBracket        reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)
    Colon           reduce using rule 66 (refer_arguments -> LBracket expression RBracket refer_arguments .)


state 111

    (85) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 85 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 85 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 85 (conditional -> logical_or Question expression Colon conditional .)
    RBracket        reduce using rule 85 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 85 (conditional -> logical_or Question expression Colon conditional .)


state 112

    (40) declaration -> type . Identifier array
    (43) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 130


state 113

    (36) statement_matched -> LBrace . block RBrace
    (13) block -> . block block_item
    (14) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 131
    empty                          shift and go to state 108

state 114

    (7) function -> type Identifier LParen parameter_list RParen LBrace block RBrace .

    Int             reduce using rule 7 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)
    $end            reduce using rule 7 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)


state 115

    (13) block -> block block_item .

    RBrace          reduce using rule 13 (block -> block block_item .)
    If              reduce using rule 13 (block -> block block_item .)
    While           reduce using rule 13 (block -> block block_item .)
    For             reduce using rule 13 (block -> block block_item .)
    Do              reduce using rule 13 (block -> block block_item .)
    Continue        reduce using rule 13 (block -> block block_item .)
    Return          reduce using rule 13 (block -> block block_item .)
    LBrace          reduce using rule 13 (block -> block block_item .)
    Break           reduce using rule 13 (block -> block block_item .)
    Int             reduce using rule 13 (block -> block block_item .)
    Identifier      reduce using rule 13 (block -> block block_item .)
    Minus           reduce using rule 13 (block -> block block_item .)
    BitNot          reduce using rule 13 (block -> block block_item .)
    Not             reduce using rule 13 (block -> block block_item .)
    Integer         reduce using rule 13 (block -> block block_item .)
    LParen          reduce using rule 13 (block -> block block_item .)
    Semi            reduce using rule 13 (block -> block block_item .)


state 116

    (15) block_item -> statement .

    RBrace          reduce using rule 15 (block_item -> statement .)
    If              reduce using rule 15 (block_item -> statement .)
    While           reduce using rule 15 (block_item -> statement .)
    For             reduce using rule 15 (block_item -> statement .)
    Do              reduce using rule 15 (block_item -> statement .)
    Continue        reduce using rule 15 (block_item -> statement .)
    Return          reduce using rule 15 (block_item -> statement .)
    LBrace          reduce using rule 15 (block_item -> statement .)
    Break           reduce using rule 15 (block_item -> statement .)
    Int             reduce using rule 15 (block_item -> statement .)
    Identifier      reduce using rule 15 (block_item -> statement .)
    Minus           reduce using rule 15 (block_item -> statement .)
    BitNot          reduce using rule 15 (block_item -> statement .)
    Not             reduce using rule 15 (block_item -> statement .)
    Integer         reduce using rule 15 (block_item -> statement .)
    LParen          reduce using rule 15 (block_item -> statement .)
    Semi            reduce using rule 15 (block_item -> statement .)


state 117

    (16) block_item -> declaration . Semi

    Semi            shift and go to state 132


state 118

    (17) statement -> statement_matched .

    RBrace          reduce using rule 17 (statement -> statement_matched .)
    If              reduce using rule 17 (statement -> statement_matched .)
    While           reduce using rule 17 (statement -> statement_matched .)
    For             reduce using rule 17 (statement -> statement_matched .)
    Do              reduce using rule 17 (statement -> statement_matched .)
    Continue        reduce using rule 17 (statement -> statement_matched .)
    Return          reduce using rule 17 (statement -> statement_matched .)
    LBrace          reduce using rule 17 (statement -> statement_matched .)
    Break           reduce using rule 17 (statement -> statement_matched .)
    Int             reduce using rule 17 (statement -> statement_matched .)
    Identifier      reduce using rule 17 (statement -> statement_matched .)
    Minus           reduce using rule 17 (statement -> statement_matched .)
    BitNot          reduce using rule 17 (statement -> statement_matched .)
    Not             reduce using rule 17 (statement -> statement_matched .)
    Integer         reduce using rule 17 (statement -> statement_matched .)
    LParen          reduce using rule 17 (statement -> statement_matched .)
    Semi            reduce using rule 17 (statement -> statement_matched .)


state 119

    (18) statement -> statement_unmatched .

    RBrace          reduce using rule 18 (statement -> statement_unmatched .)
    If              reduce using rule 18 (statement -> statement_unmatched .)
    While           reduce using rule 18 (statement -> statement_unmatched .)
    For             reduce using rule 18 (statement -> statement_unmatched .)
    Do              reduce using rule 18 (statement -> statement_unmatched .)
    Continue        reduce using rule 18 (statement -> statement_unmatched .)
    Return          reduce using rule 18 (statement -> statement_unmatched .)
    LBrace          reduce using rule 18 (statement -> statement_unmatched .)
    Break           reduce using rule 18 (statement -> statement_unmatched .)
    Int             reduce using rule 18 (statement -> statement_unmatched .)
    Identifier      reduce using rule 18 (statement -> statement_unmatched .)
    Minus           reduce using rule 18 (statement -> statement_unmatched .)
    BitNot          reduce using rule 18 (statement -> statement_unmatched .)
    Not             reduce using rule 18 (statement -> statement_unmatched .)
    Integer         reduce using rule 18 (statement -> statement_unmatched .)
    LParen          reduce using rule 18 (statement -> statement_unmatched .)
    Semi            reduce using rule 18 (statement -> statement_unmatched .)


state 120

    (38) opt_expression -> expression .

    Semi            reduce using rule 38 (opt_expression -> expression .)
    RParen          reduce using rule 38 (opt_expression -> expression .)


state 121

    (19) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 133


state 122

    (22) statement_matched -> While . LParen expression RParen statement_matched
    (23) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 134


state 123

    (24) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 135


state 124

    (35) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 136


state 125

    (30) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (31) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> Do . statement_matched While LParen expression RParen Semi
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    statement_matched              shift and go to state 137
    expression                     shift and go to state 120
    statement_unmatched            shift and go to state 138
    opt_expression                 shift and go to state 124
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 126

    (33) statement_matched -> Continue . Semi

    Semi            shift and go to state 139


state 127

    (34) statement_matched -> Return . expression Semi
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 140
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 128

    (37) statement_matched -> Break . Semi

    Semi            shift and go to state 141


state 129

    (39) opt_expression -> empty .

    Semi            reduce using rule 39 (opt_expression -> empty .)
    RParen          reduce using rule 39 (opt_expression -> empty .)


state 130

    (40) declaration -> type Identifier . array
    (43) declaration -> type Identifier . Assign expression
    (41) array -> . empty
    (42) array -> . LBracket Integer RBracket array
    (1) empty -> .

    Assign          shift and go to state 13
    LBracket        shift and go to state 16
    Semi            reduce using rule 1 (empty -> .)

    array                          shift and go to state 12
    empty                          shift and go to state 15

state 131

    (36) statement_matched -> LBrace block . RBrace
    (13) block -> block . block_item
    (15) block_item -> . statement
    (16) block_item -> . declaration Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (40) declaration -> . type Identifier array
    (43) declaration -> . type Identifier Assign expression
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (2) type -> . Int
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    RBrace          shift and go to state 142
    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Int             shift and go to state 7
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    block_item                     shift and go to state 115
    statement                      shift and go to state 116
    declaration                    shift and go to state 117
    statement_matched              shift and go to state 118
    statement_unmatched            shift and go to state 119
    type                           shift and go to state 112
    expression                     shift and go to state 120
    opt_expression                 shift and go to state 124
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 132

    (16) block_item -> declaration Semi .

    RBrace          reduce using rule 16 (block_item -> declaration Semi .)
    If              reduce using rule 16 (block_item -> declaration Semi .)
    While           reduce using rule 16 (block_item -> declaration Semi .)
    For             reduce using rule 16 (block_item -> declaration Semi .)
    Do              reduce using rule 16 (block_item -> declaration Semi .)
    Continue        reduce using rule 16 (block_item -> declaration Semi .)
    Return          reduce using rule 16 (block_item -> declaration Semi .)
    LBrace          reduce using rule 16 (block_item -> declaration Semi .)
    Break           reduce using rule 16 (block_item -> declaration Semi .)
    Int             reduce using rule 16 (block_item -> declaration Semi .)
    Identifier      reduce using rule 16 (block_item -> declaration Semi .)
    Minus           reduce using rule 16 (block_item -> declaration Semi .)
    BitNot          reduce using rule 16 (block_item -> declaration Semi .)
    Not             reduce using rule 16 (block_item -> declaration Semi .)
    Integer         reduce using rule 16 (block_item -> declaration Semi .)
    LParen          reduce using rule 16 (block_item -> declaration Semi .)
    Semi            reduce using rule 16 (block_item -> declaration Semi .)


state 133

    (19) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen . expression RParen statement
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 143
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 134

    (22) statement_matched -> While LParen . expression RParen statement_matched
    (23) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 144
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 135

    (24) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (40) declaration -> . type Identifier array
    (43) declaration -> . type Identifier Assign expression
    (47) expression -> . assignment
    (1) empty -> .
    (2) type -> . Int
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    opt_expression                 shift and go to state 145
    declaration                    shift and go to state 146
    expression                     shift and go to state 120
    empty                          shift and go to state 129
    type                           shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 136

    (35) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 35 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 35 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 35 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 35 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 35 (statement_matched -> opt_expression Semi .)


state 137

    (30) statement_matched -> Do statement_matched . While LParen expression RParen Semi
    (32) statement_unmatched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 147


state 138

    (31) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 148


state 139

    (33) statement_matched -> Continue Semi .

    RBrace          reduce using rule 33 (statement_matched -> Continue Semi .)
    If              reduce using rule 33 (statement_matched -> Continue Semi .)
    While           reduce using rule 33 (statement_matched -> Continue Semi .)
    For             reduce using rule 33 (statement_matched -> Continue Semi .)
    Do              reduce using rule 33 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 33 (statement_matched -> Continue Semi .)
    Return          reduce using rule 33 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 33 (statement_matched -> Continue Semi .)
    Break           reduce using rule 33 (statement_matched -> Continue Semi .)
    Int             reduce using rule 33 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 33 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 33 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 33 (statement_matched -> Continue Semi .)
    Not             reduce using rule 33 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 33 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 33 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 33 (statement_matched -> Continue Semi .)
    Else            reduce using rule 33 (statement_matched -> Continue Semi .)


state 140

    (34) statement_matched -> Return expression . Semi

    Semi            shift and go to state 149


state 141

    (37) statement_matched -> Break Semi .

    RBrace          reduce using rule 37 (statement_matched -> Break Semi .)
    If              reduce using rule 37 (statement_matched -> Break Semi .)
    While           reduce using rule 37 (statement_matched -> Break Semi .)
    For             reduce using rule 37 (statement_matched -> Break Semi .)
    Do              reduce using rule 37 (statement_matched -> Break Semi .)
    Continue        reduce using rule 37 (statement_matched -> Break Semi .)
    Return          reduce using rule 37 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 37 (statement_matched -> Break Semi .)
    Break           reduce using rule 37 (statement_matched -> Break Semi .)
    Int             reduce using rule 37 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 37 (statement_matched -> Break Semi .)
    Minus           reduce using rule 37 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 37 (statement_matched -> Break Semi .)
    Not             reduce using rule 37 (statement_matched -> Break Semi .)
    Integer         reduce using rule 37 (statement_matched -> Break Semi .)
    LParen          reduce using rule 37 (statement_matched -> Break Semi .)
    Semi            reduce using rule 37 (statement_matched -> Break Semi .)
    Else            reduce using rule 37 (statement_matched -> Break Semi .)


state 142

    (36) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 36 (statement_matched -> LBrace block RBrace .)


state 143

    (19) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 150


state 144

    (22) statement_matched -> While LParen expression . RParen statement_matched
    (23) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 151


state 145

    (24) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 152


state 146

    (25) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 153


state 147

    (30) statement_matched -> Do statement_matched While . LParen expression RParen Semi
    (32) statement_unmatched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 154


state 148

    (31) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 155


state 149

    (34) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 34 (statement_matched -> Return expression Semi .)
    If              reduce using rule 34 (statement_matched -> Return expression Semi .)
    While           reduce using rule 34 (statement_matched -> Return expression Semi .)
    For             reduce using rule 34 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 34 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 34 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 34 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 34 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 34 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 34 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 34 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 34 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 34 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 34 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 34 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 34 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 34 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 34 (statement_matched -> Return expression Semi .)


state 150

    (19) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen expression RParen . statement
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 120
    statement_matched              shift and go to state 156
    statement_unmatched            shift and go to state 119
    statement                      shift and go to state 157
    opt_expression                 shift and go to state 124
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 151

    (22) statement_matched -> While LParen expression RParen . statement_matched
    (23) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 120
    statement_matched              shift and go to state 158
    statement_unmatched            shift and go to state 159
    opt_expression                 shift and go to state 124
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 152

    (24) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    opt_expression                 shift and go to state 160
    expression                     shift and go to state 120
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 153

    (25) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    opt_expression                 shift and go to state 161
    expression                     shift and go to state 120
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 154

    (30) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (32) statement_unmatched -> Do statement_matched While LParen . expression RParen Semi
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 162
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 155

    (31) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (47) expression -> . assignment
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 163
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 156

    (19) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (20) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (17) statement -> statement_matched .

    Else            shift and go to state 164
    RBrace          reduce using rule 17 (statement -> statement_matched .)
    If              reduce using rule 17 (statement -> statement_matched .)
    While           reduce using rule 17 (statement -> statement_matched .)
    For             reduce using rule 17 (statement -> statement_matched .)
    Do              reduce using rule 17 (statement -> statement_matched .)
    Continue        reduce using rule 17 (statement -> statement_matched .)
    Return          reduce using rule 17 (statement -> statement_matched .)
    LBrace          reduce using rule 17 (statement -> statement_matched .)
    Break           reduce using rule 17 (statement -> statement_matched .)
    Int             reduce using rule 17 (statement -> statement_matched .)
    Identifier      reduce using rule 17 (statement -> statement_matched .)
    Minus           reduce using rule 17 (statement -> statement_matched .)
    BitNot          reduce using rule 17 (statement -> statement_matched .)
    Not             reduce using rule 17 (statement -> statement_matched .)
    Integer         reduce using rule 17 (statement -> statement_matched .)
    LParen          reduce using rule 17 (statement -> statement_matched .)
    Semi            reduce using rule 17 (statement -> statement_matched .)


state 157

    (21) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)


state 158

    (22) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)


state 159

    (23) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 160

    (24) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 165


state 161

    (25) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 166


state 162

    (30) statement_matched -> Do statement_matched While LParen expression . RParen Semi
    (32) statement_unmatched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 167


state 163

    (31) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 168


state 164

    (19) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (20) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    expression                     shift and go to state 120
    statement_matched              shift and go to state 169
    statement_unmatched            shift and go to state 170
    opt_expression                 shift and go to state 124
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 165

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    opt_expression                 shift and go to state 171
    expression                     shift and go to state 120
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 166

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    opt_expression                 shift and go to state 172
    expression                     shift and go to state 120
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 167

    (30) statement_matched -> Do statement_matched While LParen expression RParen . Semi
    (32) statement_unmatched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 173


state 168

    (31) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 174


state 169

    (19) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 170

    (20) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 171

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 175


state 172

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 176


state 173

    (30) statement_matched -> Do statement_matched While LParen expression RParen Semi .
    (32) statement_unmatched -> Do statement_matched While LParen expression RParen Semi .

  ! reduce/reduce conflict for RBrace resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for If resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for While resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for For resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Do resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Continue resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Return resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for LBrace resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Break resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Int resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Identifier resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Minus resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for BitNot resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Not resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Integer resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for LParen resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Semi resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    RBrace          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)

  ! RBrace          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! If              [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! While           [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! For             [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Do              [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Continue        [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Return          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! LBrace          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Break           [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Int             [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Identifier      [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Minus           [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! BitNot          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Not             [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Integer         [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! LParen          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Semi            [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]


state 174

    (31) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 175

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    opt_expression                 shift and go to state 124
    statement_matched              shift and go to state 177
    statement_unmatched            shift and go to state 178
    expression                     shift and go to state 120
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 176

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (47) expression -> . assignment
    (1) empty -> .
    (48) assignment -> . conditional
    (68) assignment -> . refer Assign expression
    (49) conditional -> . logical_or
    (85) conditional -> . logical_or Question expression Colon conditional
    (65) refer -> . Identifier refer_arguments
    (50) logical_or -> . logical_and
    (69) logical_or -> . logical_or Or logical_and
    (51) logical_and -> . bit_or
    (70) logical_and -> . logical_and And bit_or
    (52) bit_or -> . xor
    (71) bit_or -> . bit_or BitOr xor
    (53) xor -> . bit_and
    (72) xor -> . xor Xor bit_and
    (54) bit_and -> . equality
    (73) bit_and -> . bit_and BitAnd equality
    (55) equality -> . relational
    (74) equality -> . equality NotEqual relational
    (75) equality -> . equality Equal relational
    (56) relational -> . additive
    (76) relational -> . relational Less additive
    (77) relational -> . relational Greater additive
    (78) relational -> . relational LessEqual additive
    (79) relational -> . relational GreaterEqual additive
    (57) additive -> . multiplicative
    (80) additive -> . additive Plus multiplicative
    (81) additive -> . additive Minus multiplicative
    (58) multiplicative -> . unary
    (82) multiplicative -> . multiplicative Mul unary
    (83) multiplicative -> . multiplicative Div unary
    (84) multiplicative -> . multiplicative Mod unary
    (59) unary -> . postfix
    (62) unary -> . Minus unary
    (63) unary -> . BitNot unary
    (64) unary -> . Not unary
    (60) postfix -> . primary
    (61) postfix -> . Identifier LParen expression_list RParen
    (86) primary -> . Integer
    (87) primary -> . refer
    (88) primary -> . LParen expression RParen

    If              shift and go to state 121
    While           shift and go to state 122
    For             shift and go to state 123
    Do              shift and go to state 125
    Continue        shift and go to state 126
    Return          shift and go to state 127
    LBrace          shift and go to state 113
    Break           shift and go to state 128
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 31
    BitNot          shift and go to state 34
    Not             shift and go to state 35
    Integer         shift and go to state 38
    LParen          shift and go to state 37

    opt_expression                 shift and go to state 124
    statement_matched              shift and go to state 179
    statement_unmatched            shift and go to state 180
    expression                     shift and go to state 120
    empty                          shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    refer                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 23
    bit_or                         shift and go to state 24
    xor                            shift and go to state 25
    bit_and                        shift and go to state 26
    equality                       shift and go to state 27
    relational                     shift and go to state 28
    additive                       shift and go to state 29
    multiplicative                 shift and go to state 30
    unary                          shift and go to state 32
    postfix                        shift and go to state 33
    primary                        shift and go to state 36

state 177

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

  ! reduce/reduce conflict for RBrace resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for If resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for While resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for For resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Do resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Continue resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Return resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LBrace resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Break resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Int resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Identifier resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Minus resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for BitNot resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Not resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Integer resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LParen resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Semi resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    RBrace          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)

  ! RBrace          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! If              [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! While           [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! For             [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Do              [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Continue        [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Return          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LBrace          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Break           [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Int             [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Identifier      [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Minus           [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! BitNot          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Not             [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Integer         [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LParen          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Semi            [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]


state 178

    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 179

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

  ! reduce/reduce conflict for RBrace resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for If resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for While resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for For resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Do resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Continue resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Return resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LBrace resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Break resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Int resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Identifier resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Minus resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for BitNot resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Not resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Integer resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LParen resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Semi resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    RBrace          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)

  ! RBrace          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! If              [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! While           [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! For             [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Do              [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Continue        [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Return          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LBrace          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Break           [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Int             [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Identifier      [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Minus           [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! BitNot          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Not             [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Integer         [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LParen          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Semi            [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]


state 180

    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 173 resolved using rule (statement_matched -> Do statement_matched While LParen expression RParen Semi)
WARNING: rejected rule (statement_unmatched -> Do statement_matched While LParen expression RParen Semi) in state 173
WARNING: reduce/reduce conflict in state 177 resolved using rule (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched)
WARNING: rejected rule (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched) in state 177
WARNING: reduce/reduce conflict in state 179 resolved using rule (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched)
WARNING: rejected rule (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched) in state 179
WARNING: Rule (statement_unmatched -> Do statement_matched While LParen expression RParen Semi) is never reduced
WARNING: Rule (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched) is never reduced
WARNING: Rule (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched) is never reduced
