Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     type -> Int
Rule 3     program -> function_list
Rule 4     function_list -> function function_list
Rule 5     function_list -> empty
Rule 6     function -> type Identifier LParen parameter_list RParen LBrace block RBrace
Rule 7     parameter_list -> parameter Comma parameter_list
Rule 8     parameter_list -> parameter
Rule 9     parameter_list -> empty
Rule 10    parameter -> type Identifier
Rule 11    block -> block block_item
Rule 12    block -> empty
Rule 13    block_item -> statement
Rule 14    block_item -> declaration Semi
Rule 15    statement -> statement_matched
Rule 16    statement -> statement_unmatched
Rule 17    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 18    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 19    statement_unmatched -> If LParen expression RParen statement
Rule 20    statement_matched -> While LParen expression RParen statement_matched
Rule 21    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 22    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 23    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 24    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 25    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 26    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 27    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 28    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 29    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 30    statement_unmatched -> Do statement_matched While LParen expression RParen Semi
Rule 31    statement_matched -> Continue Semi
Rule 32    statement_matched -> Return expression Semi
Rule 33    statement_matched -> opt_expression Semi
Rule 34    statement_matched -> LBrace block RBrace
Rule 35    statement_matched -> Break Semi
Rule 36    opt_expression -> expression
Rule 37    opt_expression -> empty
Rule 38    declaration -> type Identifier
Rule 39    declaration -> type Identifier Assign expression
Rule 40    expression_list -> expression Comma expression_list
Rule 41    expression_list -> expression
Rule 42    expression_list -> empty
Rule 43    expression -> assignment
Rule 44    assignment -> conditional
Rule 45    conditional -> logical_or
Rule 46    logical_or -> logical_and
Rule 47    logical_and -> bit_or
Rule 48    bit_or -> xor
Rule 49    xor -> bit_and
Rule 50    bit_and -> equality
Rule 51    equality -> relational
Rule 52    relational -> additive
Rule 53    additive -> multiplicative
Rule 54    multiplicative -> unary
Rule 55    unary -> postfix
Rule 56    postfix -> primary
Rule 57    postfix -> Identifier LParen expression_list RParen
Rule 58    unary -> Minus unary
Rule 59    unary -> BitNot unary
Rule 60    unary -> Not unary
Rule 61    assignment -> Identifier Assign expression
Rule 62    logical_or -> logical_or Or logical_and
Rule 63    logical_and -> logical_and And bit_or
Rule 64    bit_or -> bit_or BitOr xor
Rule 65    xor -> xor Xor bit_and
Rule 66    bit_and -> bit_and BitAnd equality
Rule 67    equality -> equality NotEqual relational
Rule 68    equality -> equality Equal relational
Rule 69    relational -> relational Less additive
Rule 70    relational -> relational Greater additive
Rule 71    relational -> relational LessEqual additive
Rule 72    relational -> relational GreaterEqual additive
Rule 73    additive -> additive Plus multiplicative
Rule 74    additive -> additive Minus multiplicative
Rule 75    multiplicative -> multiplicative Mul unary
Rule 76    multiplicative -> multiplicative Div unary
Rule 77    multiplicative -> multiplicative Mod unary
Rule 78    conditional -> logical_or Question expression Colon conditional
Rule 79    primary -> Integer
Rule 80    primary -> Identifier
Rule 81    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 63
Assign               : 39 61
BitAnd               : 66
BitNot               : 59
BitOr                : 64
Break                : 35
Colon                : 78
Comma                : 7 40
Continue             : 31
Div                  : 76
Do                   : 28 29 30
Else                 : 17 18
Equal                : 68
For                  : 22 23 24 25 26 27
Greater              : 70
GreaterEqual         : 72
Identifier           : 6 10 38 39 57 61 80
If                   : 17 18 19
Int                  : 2
Integer              : 79
LBrace               : 6 34
LParen               : 6 17 18 19 20 21 22 23 24 25 26 27 28 29 30 57 81
Less                 : 69
LessEqual            : 71
Minus                : 58 74
Mod                  : 77
Mul                  : 75
Not                  : 60
NotEqual             : 67
Or                   : 62
Plus                 : 73
Question             : 78
RBrace               : 6 34
RParen               : 6 17 18 19 20 21 22 23 24 25 26 27 28 29 30 57 81
Return               : 32
Semi                 : 14 22 22 23 23 24 24 25 25 26 26 27 27 28 29 30 31 32 33 35
While                : 20 21 28 29 30
Xor                  : 65
error                : 

Nonterminals, with rules where they appear

additive             : 52 69 70 71 72 73 74
assignment           : 43
bit_and              : 49 65 66
bit_or               : 47 63 64
block                : 6 11 34
block_item           : 11
conditional          : 44 78
declaration          : 14 23 25 27
empty                : 5 9 12 37 42
equality             : 50 66 67 68
expression           : 17 18 19 20 21 28 29 30 32 36 39 40 41 61 78 81
expression_list      : 40 57
function             : 4
function_list        : 3 4
logical_and          : 46 62 63
logical_or           : 45 62 78
multiplicative       : 53 73 74 75 76 77
opt_expression       : 22 22 22 23 23 24 24 24 25 25 26 26 26 27 27 33
parameter            : 7 8
parameter_list       : 6 7
postfix              : 55
primary              : 56
program              : 0
relational           : 51 67 68 69 70 71 72
statement            : 13 19
statement_matched    : 15 17 17 18 20 22 23 26 27 28 30
statement_unmatched  : 16 18 21 24 25 29
type                 : 6 10 38 39
unary                : 54 58 59 60 75 76 77
xor                  : 48 64 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (3) program -> . function_list
    (4) function_list -> . function function_list
    (5) function_list -> . empty
    (6) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 6

    program                        shift and go to state 1
    function_list                  shift and go to state 2
    function                       shift and go to state 3
    empty                          shift and go to state 4
    type                           shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (3) program -> function_list .

    $end            reduce using rule 3 (program -> function_list .)


state 3

    (4) function_list -> function . function_list
    (4) function_list -> . function function_list
    (5) function_list -> . empty
    (6) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 6

    function                       shift and go to state 3
    function_list                  shift and go to state 7
    empty                          shift and go to state 4
    type                           shift and go to state 5

state 4

    (5) function_list -> empty .

    $end            reduce using rule 5 (function_list -> empty .)


state 5

    (6) function -> type . Identifier LParen parameter_list RParen LBrace block RBrace

    Identifier      shift and go to state 8


state 6

    (2) type -> Int .

    Identifier      reduce using rule 2 (type -> Int .)


state 7

    (4) function_list -> function function_list .

    $end            reduce using rule 4 (function_list -> function function_list .)


state 8

    (6) function -> type Identifier . LParen parameter_list RParen LBrace block RBrace

    LParen          shift and go to state 9


state 9

    (6) function -> type Identifier LParen . parameter_list RParen LBrace block RBrace
    (7) parameter_list -> . parameter Comma parameter_list
    (8) parameter_list -> . parameter
    (9) parameter_list -> . empty
    (10) parameter -> . type Identifier
    (1) empty -> .
    (2) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Int             shift and go to state 6

    type                           shift and go to state 10
    parameter_list                 shift and go to state 11
    parameter                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (10) parameter -> type . Identifier

    Identifier      shift and go to state 14


state 11

    (6) function -> type Identifier LParen parameter_list . RParen LBrace block RBrace

    RParen          shift and go to state 15


state 12

    (7) parameter_list -> parameter . Comma parameter_list
    (8) parameter_list -> parameter .

    Comma           shift and go to state 16
    RParen          reduce using rule 8 (parameter_list -> parameter .)


state 13

    (9) parameter_list -> empty .

    RParen          reduce using rule 9 (parameter_list -> empty .)


state 14

    (10) parameter -> type Identifier .

    Comma           reduce using rule 10 (parameter -> type Identifier .)
    RParen          reduce using rule 10 (parameter -> type Identifier .)


state 15

    (6) function -> type Identifier LParen parameter_list RParen . LBrace block RBrace

    LBrace          shift and go to state 17


state 16

    (7) parameter_list -> parameter Comma . parameter_list
    (7) parameter_list -> . parameter Comma parameter_list
    (8) parameter_list -> . parameter
    (9) parameter_list -> . empty
    (10) parameter -> . type Identifier
    (1) empty -> .
    (2) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Int             shift and go to state 6

    parameter                      shift and go to state 12
    parameter_list                 shift and go to state 18
    empty                          shift and go to state 13
    type                           shift and go to state 10

state 17

    (6) function -> type Identifier LParen parameter_list RParen LBrace . block RBrace
    (11) block -> . block block_item
    (12) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 19
    empty                          shift and go to state 20

state 18

    (7) parameter_list -> parameter Comma parameter_list .

    RParen          reduce using rule 7 (parameter_list -> parameter Comma parameter_list .)


state 19

    (6) function -> type Identifier LParen parameter_list RParen LBrace block . RBrace
    (11) block -> block . block_item
    (13) block_item -> . statement
    (14) block_item -> . declaration Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (38) declaration -> . type Identifier
    (39) declaration -> . type Identifier Assign expression
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (2) type -> . Int
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    RBrace          shift and go to state 25
    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    type                           shift and go to state 21
    block_item                     shift and go to state 26
    statement                      shift and go to state 27
    declaration                    shift and go to state 28
    statement_matched              shift and go to state 29
    statement_unmatched            shift and go to state 30
    expression                     shift and go to state 31
    opt_expression                 shift and go to state 35
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 20

    (12) block -> empty .

    RBrace          reduce using rule 12 (block -> empty .)
    If              reduce using rule 12 (block -> empty .)
    While           reduce using rule 12 (block -> empty .)
    For             reduce using rule 12 (block -> empty .)
    Do              reduce using rule 12 (block -> empty .)
    Continue        reduce using rule 12 (block -> empty .)
    Return          reduce using rule 12 (block -> empty .)
    LBrace          reduce using rule 12 (block -> empty .)
    Break           reduce using rule 12 (block -> empty .)
    Int             reduce using rule 12 (block -> empty .)
    Identifier      reduce using rule 12 (block -> empty .)
    Minus           reduce using rule 12 (block -> empty .)
    BitNot          reduce using rule 12 (block -> empty .)
    Not             reduce using rule 12 (block -> empty .)
    Integer         reduce using rule 12 (block -> empty .)
    LParen          reduce using rule 12 (block -> empty .)
    Semi            reduce using rule 12 (block -> empty .)


state 21

    (38) declaration -> type . Identifier
    (39) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 59


state 22

    (61) assignment -> Identifier . Assign expression
    (57) postfix -> Identifier . LParen expression_list RParen
    (80) primary -> Identifier .

    Assign          shift and go to state 60
    LParen          shift and go to state 61
    Mul             reduce using rule 80 (primary -> Identifier .)
    Div             reduce using rule 80 (primary -> Identifier .)
    Mod             reduce using rule 80 (primary -> Identifier .)
    Plus            reduce using rule 80 (primary -> Identifier .)
    Minus           reduce using rule 80 (primary -> Identifier .)
    Less            reduce using rule 80 (primary -> Identifier .)
    Greater         reduce using rule 80 (primary -> Identifier .)
    LessEqual       reduce using rule 80 (primary -> Identifier .)
    GreaterEqual    reduce using rule 80 (primary -> Identifier .)
    NotEqual        reduce using rule 80 (primary -> Identifier .)
    Equal           reduce using rule 80 (primary -> Identifier .)
    BitAnd          reduce using rule 80 (primary -> Identifier .)
    Xor             reduce using rule 80 (primary -> Identifier .)
    BitOr           reduce using rule 80 (primary -> Identifier .)
    And             reduce using rule 80 (primary -> Identifier .)
    Question        reduce using rule 80 (primary -> Identifier .)
    Or              reduce using rule 80 (primary -> Identifier .)
    Semi            reduce using rule 80 (primary -> Identifier .)
    RParen          reduce using rule 80 (primary -> Identifier .)
    Comma           reduce using rule 80 (primary -> Identifier .)
    Colon           reduce using rule 80 (primary -> Identifier .)


state 23

    (81) primary -> LParen . expression RParen
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 62
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 24

    (34) statement_matched -> LBrace . block RBrace
    (11) block -> . block block_item
    (12) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 63
    empty                          shift and go to state 20

state 25

    (6) function -> type Identifier LParen parameter_list RParen LBrace block RBrace .

    Int             reduce using rule 6 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)
    $end            reduce using rule 6 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)


state 26

    (11) block -> block block_item .

    RBrace          reduce using rule 11 (block -> block block_item .)
    If              reduce using rule 11 (block -> block block_item .)
    While           reduce using rule 11 (block -> block block_item .)
    For             reduce using rule 11 (block -> block block_item .)
    Do              reduce using rule 11 (block -> block block_item .)
    Continue        reduce using rule 11 (block -> block block_item .)
    Return          reduce using rule 11 (block -> block block_item .)
    LBrace          reduce using rule 11 (block -> block block_item .)
    Break           reduce using rule 11 (block -> block block_item .)
    Int             reduce using rule 11 (block -> block block_item .)
    Identifier      reduce using rule 11 (block -> block block_item .)
    Minus           reduce using rule 11 (block -> block block_item .)
    BitNot          reduce using rule 11 (block -> block block_item .)
    Not             reduce using rule 11 (block -> block block_item .)
    Integer         reduce using rule 11 (block -> block block_item .)
    LParen          reduce using rule 11 (block -> block block_item .)
    Semi            reduce using rule 11 (block -> block block_item .)


state 27

    (13) block_item -> statement .

    RBrace          reduce using rule 13 (block_item -> statement .)
    If              reduce using rule 13 (block_item -> statement .)
    While           reduce using rule 13 (block_item -> statement .)
    For             reduce using rule 13 (block_item -> statement .)
    Do              reduce using rule 13 (block_item -> statement .)
    Continue        reduce using rule 13 (block_item -> statement .)
    Return          reduce using rule 13 (block_item -> statement .)
    LBrace          reduce using rule 13 (block_item -> statement .)
    Break           reduce using rule 13 (block_item -> statement .)
    Int             reduce using rule 13 (block_item -> statement .)
    Identifier      reduce using rule 13 (block_item -> statement .)
    Minus           reduce using rule 13 (block_item -> statement .)
    BitNot          reduce using rule 13 (block_item -> statement .)
    Not             reduce using rule 13 (block_item -> statement .)
    Integer         reduce using rule 13 (block_item -> statement .)
    LParen          reduce using rule 13 (block_item -> statement .)
    Semi            reduce using rule 13 (block_item -> statement .)


state 28

    (14) block_item -> declaration . Semi

    Semi            shift and go to state 64


state 29

    (15) statement -> statement_matched .

    RBrace          reduce using rule 15 (statement -> statement_matched .)
    If              reduce using rule 15 (statement -> statement_matched .)
    While           reduce using rule 15 (statement -> statement_matched .)
    For             reduce using rule 15 (statement -> statement_matched .)
    Do              reduce using rule 15 (statement -> statement_matched .)
    Continue        reduce using rule 15 (statement -> statement_matched .)
    Return          reduce using rule 15 (statement -> statement_matched .)
    LBrace          reduce using rule 15 (statement -> statement_matched .)
    Break           reduce using rule 15 (statement -> statement_matched .)
    Int             reduce using rule 15 (statement -> statement_matched .)
    Identifier      reduce using rule 15 (statement -> statement_matched .)
    Minus           reduce using rule 15 (statement -> statement_matched .)
    BitNot          reduce using rule 15 (statement -> statement_matched .)
    Not             reduce using rule 15 (statement -> statement_matched .)
    Integer         reduce using rule 15 (statement -> statement_matched .)
    LParen          reduce using rule 15 (statement -> statement_matched .)
    Semi            reduce using rule 15 (statement -> statement_matched .)


state 30

    (16) statement -> statement_unmatched .

    RBrace          reduce using rule 16 (statement -> statement_unmatched .)
    If              reduce using rule 16 (statement -> statement_unmatched .)
    While           reduce using rule 16 (statement -> statement_unmatched .)
    For             reduce using rule 16 (statement -> statement_unmatched .)
    Do              reduce using rule 16 (statement -> statement_unmatched .)
    Continue        reduce using rule 16 (statement -> statement_unmatched .)
    Return          reduce using rule 16 (statement -> statement_unmatched .)
    LBrace          reduce using rule 16 (statement -> statement_unmatched .)
    Break           reduce using rule 16 (statement -> statement_unmatched .)
    Int             reduce using rule 16 (statement -> statement_unmatched .)
    Identifier      reduce using rule 16 (statement -> statement_unmatched .)
    Minus           reduce using rule 16 (statement -> statement_unmatched .)
    BitNot          reduce using rule 16 (statement -> statement_unmatched .)
    Not             reduce using rule 16 (statement -> statement_unmatched .)
    Integer         reduce using rule 16 (statement -> statement_unmatched .)
    LParen          reduce using rule 16 (statement -> statement_unmatched .)
    Semi            reduce using rule 16 (statement -> statement_unmatched .)


state 31

    (36) opt_expression -> expression .

    Semi            reduce using rule 36 (opt_expression -> expression .)
    RParen          reduce using rule 36 (opt_expression -> expression .)


state 32

    (17) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 65


state 33

    (20) statement_matched -> While . LParen expression RParen statement_matched
    (21) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 66


state 34

    (22) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 67


state 35

    (33) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 68


state 36

    (28) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (29) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> Do . statement_matched While LParen expression RParen Semi
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    statement_matched              shift and go to state 69
    expression                     shift and go to state 31
    statement_unmatched            shift and go to state 70
    opt_expression                 shift and go to state 35
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 37

    (31) statement_matched -> Continue . Semi

    Semi            shift and go to state 71


state 38

    (32) statement_matched -> Return . expression Semi
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 72
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 39

    (35) statement_matched -> Break . Semi

    Semi            shift and go to state 73


state 40

    (37) opt_expression -> empty .

    Semi            reduce using rule 37 (opt_expression -> empty .)
    RParen          reduce using rule 37 (opt_expression -> empty .)


state 41

    (43) expression -> assignment .

    Semi            reduce using rule 43 (expression -> assignment .)
    RParen          reduce using rule 43 (expression -> assignment .)
    Comma           reduce using rule 43 (expression -> assignment .)
    Colon           reduce using rule 43 (expression -> assignment .)


state 42

    (44) assignment -> conditional .

    Semi            reduce using rule 44 (assignment -> conditional .)
    RParen          reduce using rule 44 (assignment -> conditional .)
    Comma           reduce using rule 44 (assignment -> conditional .)
    Colon           reduce using rule 44 (assignment -> conditional .)


state 43

    (45) conditional -> logical_or .
    (78) conditional -> logical_or . Question expression Colon conditional
    (62) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 45 (conditional -> logical_or .)
    RParen          reduce using rule 45 (conditional -> logical_or .)
    Comma           reduce using rule 45 (conditional -> logical_or .)
    Colon           reduce using rule 45 (conditional -> logical_or .)
    Question        shift and go to state 74
    Or              shift and go to state 75


state 44

    (46) logical_or -> logical_and .
    (63) logical_and -> logical_and . And bit_or

    Question        reduce using rule 46 (logical_or -> logical_and .)
    Or              reduce using rule 46 (logical_or -> logical_and .)
    Semi            reduce using rule 46 (logical_or -> logical_and .)
    RParen          reduce using rule 46 (logical_or -> logical_and .)
    Comma           reduce using rule 46 (logical_or -> logical_and .)
    Colon           reduce using rule 46 (logical_or -> logical_and .)
    And             shift and go to state 76


state 45

    (47) logical_and -> bit_or .
    (64) bit_or -> bit_or . BitOr xor

    And             reduce using rule 47 (logical_and -> bit_or .)
    Question        reduce using rule 47 (logical_and -> bit_or .)
    Or              reduce using rule 47 (logical_and -> bit_or .)
    Semi            reduce using rule 47 (logical_and -> bit_or .)
    RParen          reduce using rule 47 (logical_and -> bit_or .)
    Comma           reduce using rule 47 (logical_and -> bit_or .)
    Colon           reduce using rule 47 (logical_and -> bit_or .)
    BitOr           shift and go to state 77


state 46

    (48) bit_or -> xor .
    (65) xor -> xor . Xor bit_and

    BitOr           reduce using rule 48 (bit_or -> xor .)
    And             reduce using rule 48 (bit_or -> xor .)
    Question        reduce using rule 48 (bit_or -> xor .)
    Or              reduce using rule 48 (bit_or -> xor .)
    Semi            reduce using rule 48 (bit_or -> xor .)
    RParen          reduce using rule 48 (bit_or -> xor .)
    Comma           reduce using rule 48 (bit_or -> xor .)
    Colon           reduce using rule 48 (bit_or -> xor .)
    Xor             shift and go to state 78


state 47

    (49) xor -> bit_and .
    (66) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 49 (xor -> bit_and .)
    BitOr           reduce using rule 49 (xor -> bit_and .)
    And             reduce using rule 49 (xor -> bit_and .)
    Question        reduce using rule 49 (xor -> bit_and .)
    Or              reduce using rule 49 (xor -> bit_and .)
    Semi            reduce using rule 49 (xor -> bit_and .)
    RParen          reduce using rule 49 (xor -> bit_and .)
    Comma           reduce using rule 49 (xor -> bit_and .)
    Colon           reduce using rule 49 (xor -> bit_and .)
    BitAnd          shift and go to state 79


state 48

    (50) bit_and -> equality .
    (67) equality -> equality . NotEqual relational
    (68) equality -> equality . Equal relational

    BitAnd          reduce using rule 50 (bit_and -> equality .)
    Xor             reduce using rule 50 (bit_and -> equality .)
    BitOr           reduce using rule 50 (bit_and -> equality .)
    And             reduce using rule 50 (bit_and -> equality .)
    Question        reduce using rule 50 (bit_and -> equality .)
    Or              reduce using rule 50 (bit_and -> equality .)
    Semi            reduce using rule 50 (bit_and -> equality .)
    RParen          reduce using rule 50 (bit_and -> equality .)
    Comma           reduce using rule 50 (bit_and -> equality .)
    Colon           reduce using rule 50 (bit_and -> equality .)
    NotEqual        shift and go to state 80
    Equal           shift and go to state 81


state 49

    (51) equality -> relational .
    (69) relational -> relational . Less additive
    (70) relational -> relational . Greater additive
    (71) relational -> relational . LessEqual additive
    (72) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 51 (equality -> relational .)
    Equal           reduce using rule 51 (equality -> relational .)
    BitAnd          reduce using rule 51 (equality -> relational .)
    Xor             reduce using rule 51 (equality -> relational .)
    BitOr           reduce using rule 51 (equality -> relational .)
    And             reduce using rule 51 (equality -> relational .)
    Question        reduce using rule 51 (equality -> relational .)
    Or              reduce using rule 51 (equality -> relational .)
    Semi            reduce using rule 51 (equality -> relational .)
    RParen          reduce using rule 51 (equality -> relational .)
    Comma           reduce using rule 51 (equality -> relational .)
    Colon           reduce using rule 51 (equality -> relational .)
    Less            shift and go to state 82
    Greater         shift and go to state 83
    LessEqual       shift and go to state 84
    GreaterEqual    shift and go to state 85


state 50

    (52) relational -> additive .
    (73) additive -> additive . Plus multiplicative
    (74) additive -> additive . Minus multiplicative

    Less            reduce using rule 52 (relational -> additive .)
    Greater         reduce using rule 52 (relational -> additive .)
    LessEqual       reduce using rule 52 (relational -> additive .)
    GreaterEqual    reduce using rule 52 (relational -> additive .)
    NotEqual        reduce using rule 52 (relational -> additive .)
    Equal           reduce using rule 52 (relational -> additive .)
    BitAnd          reduce using rule 52 (relational -> additive .)
    Xor             reduce using rule 52 (relational -> additive .)
    BitOr           reduce using rule 52 (relational -> additive .)
    And             reduce using rule 52 (relational -> additive .)
    Question        reduce using rule 52 (relational -> additive .)
    Or              reduce using rule 52 (relational -> additive .)
    Semi            reduce using rule 52 (relational -> additive .)
    RParen          reduce using rule 52 (relational -> additive .)
    Comma           reduce using rule 52 (relational -> additive .)
    Colon           reduce using rule 52 (relational -> additive .)
    Plus            shift and go to state 86
    Minus           shift and go to state 87


state 51

    (53) additive -> multiplicative .
    (75) multiplicative -> multiplicative . Mul unary
    (76) multiplicative -> multiplicative . Div unary
    (77) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 53 (additive -> multiplicative .)
    Minus           reduce using rule 53 (additive -> multiplicative .)
    Less            reduce using rule 53 (additive -> multiplicative .)
    Greater         reduce using rule 53 (additive -> multiplicative .)
    LessEqual       reduce using rule 53 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 53 (additive -> multiplicative .)
    NotEqual        reduce using rule 53 (additive -> multiplicative .)
    Equal           reduce using rule 53 (additive -> multiplicative .)
    BitAnd          reduce using rule 53 (additive -> multiplicative .)
    Xor             reduce using rule 53 (additive -> multiplicative .)
    BitOr           reduce using rule 53 (additive -> multiplicative .)
    And             reduce using rule 53 (additive -> multiplicative .)
    Question        reduce using rule 53 (additive -> multiplicative .)
    Or              reduce using rule 53 (additive -> multiplicative .)
    Semi            reduce using rule 53 (additive -> multiplicative .)
    RParen          reduce using rule 53 (additive -> multiplicative .)
    Comma           reduce using rule 53 (additive -> multiplicative .)
    Colon           reduce using rule 53 (additive -> multiplicative .)
    Mul             shift and go to state 88
    Div             shift and go to state 89
    Mod             shift and go to state 90


state 52

    (58) unary -> Minus . unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    unary                          shift and go to state 91
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 53

    (54) multiplicative -> unary .

    Mul             reduce using rule 54 (multiplicative -> unary .)
    Div             reduce using rule 54 (multiplicative -> unary .)
    Mod             reduce using rule 54 (multiplicative -> unary .)
    Plus            reduce using rule 54 (multiplicative -> unary .)
    Minus           reduce using rule 54 (multiplicative -> unary .)
    Less            reduce using rule 54 (multiplicative -> unary .)
    Greater         reduce using rule 54 (multiplicative -> unary .)
    LessEqual       reduce using rule 54 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 54 (multiplicative -> unary .)
    NotEqual        reduce using rule 54 (multiplicative -> unary .)
    Equal           reduce using rule 54 (multiplicative -> unary .)
    BitAnd          reduce using rule 54 (multiplicative -> unary .)
    Xor             reduce using rule 54 (multiplicative -> unary .)
    BitOr           reduce using rule 54 (multiplicative -> unary .)
    And             reduce using rule 54 (multiplicative -> unary .)
    Question        reduce using rule 54 (multiplicative -> unary .)
    Or              reduce using rule 54 (multiplicative -> unary .)
    Semi            reduce using rule 54 (multiplicative -> unary .)
    RParen          reduce using rule 54 (multiplicative -> unary .)
    Comma           reduce using rule 54 (multiplicative -> unary .)
    Colon           reduce using rule 54 (multiplicative -> unary .)


state 54

    (55) unary -> postfix .

    Mul             reduce using rule 55 (unary -> postfix .)
    Div             reduce using rule 55 (unary -> postfix .)
    Mod             reduce using rule 55 (unary -> postfix .)
    Plus            reduce using rule 55 (unary -> postfix .)
    Minus           reduce using rule 55 (unary -> postfix .)
    Less            reduce using rule 55 (unary -> postfix .)
    Greater         reduce using rule 55 (unary -> postfix .)
    LessEqual       reduce using rule 55 (unary -> postfix .)
    GreaterEqual    reduce using rule 55 (unary -> postfix .)
    NotEqual        reduce using rule 55 (unary -> postfix .)
    Equal           reduce using rule 55 (unary -> postfix .)
    BitAnd          reduce using rule 55 (unary -> postfix .)
    Xor             reduce using rule 55 (unary -> postfix .)
    BitOr           reduce using rule 55 (unary -> postfix .)
    And             reduce using rule 55 (unary -> postfix .)
    Question        reduce using rule 55 (unary -> postfix .)
    Or              reduce using rule 55 (unary -> postfix .)
    Semi            reduce using rule 55 (unary -> postfix .)
    RParen          reduce using rule 55 (unary -> postfix .)
    Comma           reduce using rule 55 (unary -> postfix .)
    Colon           reduce using rule 55 (unary -> postfix .)


state 55

    (59) unary -> BitNot . unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    unary                          shift and go to state 93
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 56

    (60) unary -> Not . unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    unary                          shift and go to state 94
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 57

    (56) postfix -> primary .

    Mul             reduce using rule 56 (postfix -> primary .)
    Div             reduce using rule 56 (postfix -> primary .)
    Mod             reduce using rule 56 (postfix -> primary .)
    Plus            reduce using rule 56 (postfix -> primary .)
    Minus           reduce using rule 56 (postfix -> primary .)
    Less            reduce using rule 56 (postfix -> primary .)
    Greater         reduce using rule 56 (postfix -> primary .)
    LessEqual       reduce using rule 56 (postfix -> primary .)
    GreaterEqual    reduce using rule 56 (postfix -> primary .)
    NotEqual        reduce using rule 56 (postfix -> primary .)
    Equal           reduce using rule 56 (postfix -> primary .)
    BitAnd          reduce using rule 56 (postfix -> primary .)
    Xor             reduce using rule 56 (postfix -> primary .)
    BitOr           reduce using rule 56 (postfix -> primary .)
    And             reduce using rule 56 (postfix -> primary .)
    Question        reduce using rule 56 (postfix -> primary .)
    Or              reduce using rule 56 (postfix -> primary .)
    Semi            reduce using rule 56 (postfix -> primary .)
    RParen          reduce using rule 56 (postfix -> primary .)
    Comma           reduce using rule 56 (postfix -> primary .)
    Colon           reduce using rule 56 (postfix -> primary .)


state 58

    (79) primary -> Integer .

    Mul             reduce using rule 79 (primary -> Integer .)
    Div             reduce using rule 79 (primary -> Integer .)
    Mod             reduce using rule 79 (primary -> Integer .)
    Plus            reduce using rule 79 (primary -> Integer .)
    Minus           reduce using rule 79 (primary -> Integer .)
    Less            reduce using rule 79 (primary -> Integer .)
    Greater         reduce using rule 79 (primary -> Integer .)
    LessEqual       reduce using rule 79 (primary -> Integer .)
    GreaterEqual    reduce using rule 79 (primary -> Integer .)
    NotEqual        reduce using rule 79 (primary -> Integer .)
    Equal           reduce using rule 79 (primary -> Integer .)
    BitAnd          reduce using rule 79 (primary -> Integer .)
    Xor             reduce using rule 79 (primary -> Integer .)
    BitOr           reduce using rule 79 (primary -> Integer .)
    And             reduce using rule 79 (primary -> Integer .)
    Question        reduce using rule 79 (primary -> Integer .)
    Or              reduce using rule 79 (primary -> Integer .)
    Semi            reduce using rule 79 (primary -> Integer .)
    RParen          reduce using rule 79 (primary -> Integer .)
    Comma           reduce using rule 79 (primary -> Integer .)
    Colon           reduce using rule 79 (primary -> Integer .)


state 59

    (38) declaration -> type Identifier .
    (39) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 38 (declaration -> type Identifier .)
    Assign          shift and go to state 95


state 60

    (61) assignment -> Identifier Assign . expression
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 96
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 61

    (57) postfix -> Identifier LParen . expression_list RParen
    (40) expression_list -> . expression Comma expression_list
    (41) expression_list -> . expression
    (42) expression_list -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression_list                shift and go to state 97
    expression                     shift and go to state 98
    empty                          shift and go to state 99
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 62

    (81) primary -> LParen expression . RParen

    RParen          shift and go to state 100


state 63

    (34) statement_matched -> LBrace block . RBrace
    (11) block -> block . block_item
    (13) block_item -> . statement
    (14) block_item -> . declaration Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (38) declaration -> . type Identifier
    (39) declaration -> . type Identifier Assign expression
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (2) type -> . Int
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    RBrace          shift and go to state 101
    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    block_item                     shift and go to state 26
    statement                      shift and go to state 27
    declaration                    shift and go to state 28
    statement_matched              shift and go to state 29
    statement_unmatched            shift and go to state 30
    type                           shift and go to state 21
    expression                     shift and go to state 31
    opt_expression                 shift and go to state 35
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 64

    (14) block_item -> declaration Semi .

    RBrace          reduce using rule 14 (block_item -> declaration Semi .)
    If              reduce using rule 14 (block_item -> declaration Semi .)
    While           reduce using rule 14 (block_item -> declaration Semi .)
    For             reduce using rule 14 (block_item -> declaration Semi .)
    Do              reduce using rule 14 (block_item -> declaration Semi .)
    Continue        reduce using rule 14 (block_item -> declaration Semi .)
    Return          reduce using rule 14 (block_item -> declaration Semi .)
    LBrace          reduce using rule 14 (block_item -> declaration Semi .)
    Break           reduce using rule 14 (block_item -> declaration Semi .)
    Int             reduce using rule 14 (block_item -> declaration Semi .)
    Identifier      reduce using rule 14 (block_item -> declaration Semi .)
    Minus           reduce using rule 14 (block_item -> declaration Semi .)
    BitNot          reduce using rule 14 (block_item -> declaration Semi .)
    Not             reduce using rule 14 (block_item -> declaration Semi .)
    Integer         reduce using rule 14 (block_item -> declaration Semi .)
    LParen          reduce using rule 14 (block_item -> declaration Semi .)
    Semi            reduce using rule 14 (block_item -> declaration Semi .)


state 65

    (17) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen . expression RParen statement
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 102
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 66

    (20) statement_matched -> While LParen . expression RParen statement_matched
    (21) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 103
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 67

    (22) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (38) declaration -> . type Identifier
    (39) declaration -> . type Identifier Assign expression
    (43) expression -> . assignment
    (1) empty -> .
    (2) type -> . Int
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 6
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    opt_expression                 shift and go to state 104
    declaration                    shift and go to state 105
    expression                     shift and go to state 31
    empty                          shift and go to state 40
    type                           shift and go to state 21
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 68

    (33) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 33 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 33 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 33 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 33 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 33 (statement_matched -> opt_expression Semi .)


state 69

    (28) statement_matched -> Do statement_matched . While LParen expression RParen Semi
    (30) statement_unmatched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 106


state 70

    (29) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 107


state 71

    (31) statement_matched -> Continue Semi .

    RBrace          reduce using rule 31 (statement_matched -> Continue Semi .)
    If              reduce using rule 31 (statement_matched -> Continue Semi .)
    While           reduce using rule 31 (statement_matched -> Continue Semi .)
    For             reduce using rule 31 (statement_matched -> Continue Semi .)
    Do              reduce using rule 31 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 31 (statement_matched -> Continue Semi .)
    Return          reduce using rule 31 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 31 (statement_matched -> Continue Semi .)
    Break           reduce using rule 31 (statement_matched -> Continue Semi .)
    Int             reduce using rule 31 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 31 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 31 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 31 (statement_matched -> Continue Semi .)
    Not             reduce using rule 31 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 31 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 31 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 31 (statement_matched -> Continue Semi .)
    Else            reduce using rule 31 (statement_matched -> Continue Semi .)


state 72

    (32) statement_matched -> Return expression . Semi

    Semi            shift and go to state 108


state 73

    (35) statement_matched -> Break Semi .

    RBrace          reduce using rule 35 (statement_matched -> Break Semi .)
    If              reduce using rule 35 (statement_matched -> Break Semi .)
    While           reduce using rule 35 (statement_matched -> Break Semi .)
    For             reduce using rule 35 (statement_matched -> Break Semi .)
    Do              reduce using rule 35 (statement_matched -> Break Semi .)
    Continue        reduce using rule 35 (statement_matched -> Break Semi .)
    Return          reduce using rule 35 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 35 (statement_matched -> Break Semi .)
    Break           reduce using rule 35 (statement_matched -> Break Semi .)
    Int             reduce using rule 35 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 35 (statement_matched -> Break Semi .)
    Minus           reduce using rule 35 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 35 (statement_matched -> Break Semi .)
    Not             reduce using rule 35 (statement_matched -> Break Semi .)
    Integer         reduce using rule 35 (statement_matched -> Break Semi .)
    LParen          reduce using rule 35 (statement_matched -> Break Semi .)
    Semi            reduce using rule 35 (statement_matched -> Break Semi .)
    Else            reduce using rule 35 (statement_matched -> Break Semi .)


state 74

    (78) conditional -> logical_or Question . expression Colon conditional
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    logical_or                     shift and go to state 43
    expression                     shift and go to state 109
    conditional                    shift and go to state 42
    assignment                     shift and go to state 41
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 75

    (62) logical_or -> logical_or Or . logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    logical_and                    shift and go to state 110
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 76

    (63) logical_and -> logical_and And . bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    bit_or                         shift and go to state 111
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 77

    (64) bit_or -> bit_or BitOr . xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    xor                            shift and go to state 112
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 78

    (65) xor -> xor Xor . bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    bit_and                        shift and go to state 113
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 79

    (66) bit_and -> bit_and BitAnd . equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    equality                       shift and go to state 114
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 80

    (67) equality -> equality NotEqual . relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    relational                     shift and go to state 115
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 81

    (68) equality -> equality Equal . relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    relational                     shift and go to state 116
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 82

    (69) relational -> relational Less . additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    additive                       shift and go to state 117
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 83

    (70) relational -> relational Greater . additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    additive                       shift and go to state 118
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 84

    (71) relational -> relational LessEqual . additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    additive                       shift and go to state 119
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 85

    (72) relational -> relational GreaterEqual . additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    additive                       shift and go to state 120
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 86

    (73) additive -> additive Plus . multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    multiplicative                 shift and go to state 121
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 87

    (74) additive -> additive Minus . multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    multiplicative                 shift and go to state 122
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 88

    (75) multiplicative -> multiplicative Mul . unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    unary                          shift and go to state 123
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 89

    (76) multiplicative -> multiplicative Div . unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    unary                          shift and go to state 124
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 90

    (77) multiplicative -> multiplicative Mod . unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    unary                          shift and go to state 125
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 91

    (58) unary -> Minus unary .

    Mul             reduce using rule 58 (unary -> Minus unary .)
    Div             reduce using rule 58 (unary -> Minus unary .)
    Mod             reduce using rule 58 (unary -> Minus unary .)
    Plus            reduce using rule 58 (unary -> Minus unary .)
    Minus           reduce using rule 58 (unary -> Minus unary .)
    Less            reduce using rule 58 (unary -> Minus unary .)
    Greater         reduce using rule 58 (unary -> Minus unary .)
    LessEqual       reduce using rule 58 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 58 (unary -> Minus unary .)
    NotEqual        reduce using rule 58 (unary -> Minus unary .)
    Equal           reduce using rule 58 (unary -> Minus unary .)
    BitAnd          reduce using rule 58 (unary -> Minus unary .)
    Xor             reduce using rule 58 (unary -> Minus unary .)
    BitOr           reduce using rule 58 (unary -> Minus unary .)
    And             reduce using rule 58 (unary -> Minus unary .)
    Question        reduce using rule 58 (unary -> Minus unary .)
    Or              reduce using rule 58 (unary -> Minus unary .)
    Semi            reduce using rule 58 (unary -> Minus unary .)
    RParen          reduce using rule 58 (unary -> Minus unary .)
    Comma           reduce using rule 58 (unary -> Minus unary .)
    Colon           reduce using rule 58 (unary -> Minus unary .)


state 92

    (57) postfix -> Identifier . LParen expression_list RParen
    (80) primary -> Identifier .

    LParen          shift and go to state 61
    Mul             reduce using rule 80 (primary -> Identifier .)
    Div             reduce using rule 80 (primary -> Identifier .)
    Mod             reduce using rule 80 (primary -> Identifier .)
    Plus            reduce using rule 80 (primary -> Identifier .)
    Minus           reduce using rule 80 (primary -> Identifier .)
    Less            reduce using rule 80 (primary -> Identifier .)
    Greater         reduce using rule 80 (primary -> Identifier .)
    LessEqual       reduce using rule 80 (primary -> Identifier .)
    GreaterEqual    reduce using rule 80 (primary -> Identifier .)
    NotEqual        reduce using rule 80 (primary -> Identifier .)
    Equal           reduce using rule 80 (primary -> Identifier .)
    BitAnd          reduce using rule 80 (primary -> Identifier .)
    Xor             reduce using rule 80 (primary -> Identifier .)
    BitOr           reduce using rule 80 (primary -> Identifier .)
    And             reduce using rule 80 (primary -> Identifier .)
    Question        reduce using rule 80 (primary -> Identifier .)
    Or              reduce using rule 80 (primary -> Identifier .)
    Semi            reduce using rule 80 (primary -> Identifier .)
    RParen          reduce using rule 80 (primary -> Identifier .)
    Comma           reduce using rule 80 (primary -> Identifier .)
    Colon           reduce using rule 80 (primary -> Identifier .)


state 93

    (59) unary -> BitNot unary .

    Mul             reduce using rule 59 (unary -> BitNot unary .)
    Div             reduce using rule 59 (unary -> BitNot unary .)
    Mod             reduce using rule 59 (unary -> BitNot unary .)
    Plus            reduce using rule 59 (unary -> BitNot unary .)
    Minus           reduce using rule 59 (unary -> BitNot unary .)
    Less            reduce using rule 59 (unary -> BitNot unary .)
    Greater         reduce using rule 59 (unary -> BitNot unary .)
    LessEqual       reduce using rule 59 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 59 (unary -> BitNot unary .)
    NotEqual        reduce using rule 59 (unary -> BitNot unary .)
    Equal           reduce using rule 59 (unary -> BitNot unary .)
    BitAnd          reduce using rule 59 (unary -> BitNot unary .)
    Xor             reduce using rule 59 (unary -> BitNot unary .)
    BitOr           reduce using rule 59 (unary -> BitNot unary .)
    And             reduce using rule 59 (unary -> BitNot unary .)
    Question        reduce using rule 59 (unary -> BitNot unary .)
    Or              reduce using rule 59 (unary -> BitNot unary .)
    Semi            reduce using rule 59 (unary -> BitNot unary .)
    RParen          reduce using rule 59 (unary -> BitNot unary .)
    Comma           reduce using rule 59 (unary -> BitNot unary .)
    Colon           reduce using rule 59 (unary -> BitNot unary .)


state 94

    (60) unary -> Not unary .

    Mul             reduce using rule 60 (unary -> Not unary .)
    Div             reduce using rule 60 (unary -> Not unary .)
    Mod             reduce using rule 60 (unary -> Not unary .)
    Plus            reduce using rule 60 (unary -> Not unary .)
    Minus           reduce using rule 60 (unary -> Not unary .)
    Less            reduce using rule 60 (unary -> Not unary .)
    Greater         reduce using rule 60 (unary -> Not unary .)
    LessEqual       reduce using rule 60 (unary -> Not unary .)
    GreaterEqual    reduce using rule 60 (unary -> Not unary .)
    NotEqual        reduce using rule 60 (unary -> Not unary .)
    Equal           reduce using rule 60 (unary -> Not unary .)
    BitAnd          reduce using rule 60 (unary -> Not unary .)
    Xor             reduce using rule 60 (unary -> Not unary .)
    BitOr           reduce using rule 60 (unary -> Not unary .)
    And             reduce using rule 60 (unary -> Not unary .)
    Question        reduce using rule 60 (unary -> Not unary .)
    Or              reduce using rule 60 (unary -> Not unary .)
    Semi            reduce using rule 60 (unary -> Not unary .)
    RParen          reduce using rule 60 (unary -> Not unary .)
    Comma           reduce using rule 60 (unary -> Not unary .)
    Colon           reduce using rule 60 (unary -> Not unary .)


state 95

    (39) declaration -> type Identifier Assign . expression
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 126
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 96

    (61) assignment -> Identifier Assign expression .

    Semi            reduce using rule 61 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 61 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 61 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 61 (assignment -> Identifier Assign expression .)


state 97

    (57) postfix -> Identifier LParen expression_list . RParen

    RParen          shift and go to state 127


state 98

    (40) expression_list -> expression . Comma expression_list
    (41) expression_list -> expression .

    Comma           shift and go to state 128
    RParen          reduce using rule 41 (expression_list -> expression .)


state 99

    (42) expression_list -> empty .

    RParen          reduce using rule 42 (expression_list -> empty .)


state 100

    (81) primary -> LParen expression RParen .

    Mul             reduce using rule 81 (primary -> LParen expression RParen .)
    Div             reduce using rule 81 (primary -> LParen expression RParen .)
    Mod             reduce using rule 81 (primary -> LParen expression RParen .)
    Plus            reduce using rule 81 (primary -> LParen expression RParen .)
    Minus           reduce using rule 81 (primary -> LParen expression RParen .)
    Less            reduce using rule 81 (primary -> LParen expression RParen .)
    Greater         reduce using rule 81 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 81 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 81 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 81 (primary -> LParen expression RParen .)
    Equal           reduce using rule 81 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 81 (primary -> LParen expression RParen .)
    Xor             reduce using rule 81 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 81 (primary -> LParen expression RParen .)
    And             reduce using rule 81 (primary -> LParen expression RParen .)
    Question        reduce using rule 81 (primary -> LParen expression RParen .)
    Or              reduce using rule 81 (primary -> LParen expression RParen .)
    Semi            reduce using rule 81 (primary -> LParen expression RParen .)
    RParen          reduce using rule 81 (primary -> LParen expression RParen .)
    Comma           reduce using rule 81 (primary -> LParen expression RParen .)
    Colon           reduce using rule 81 (primary -> LParen expression RParen .)


state 101

    (34) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 34 (statement_matched -> LBrace block RBrace .)


state 102

    (17) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 129


state 103

    (20) statement_matched -> While LParen expression . RParen statement_matched
    (21) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 130


state 104

    (22) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 131


state 105

    (23) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 132


state 106

    (28) statement_matched -> Do statement_matched While . LParen expression RParen Semi
    (30) statement_unmatched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 133


state 107

    (29) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 134


state 108

    (32) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 32 (statement_matched -> Return expression Semi .)
    If              reduce using rule 32 (statement_matched -> Return expression Semi .)
    While           reduce using rule 32 (statement_matched -> Return expression Semi .)
    For             reduce using rule 32 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 32 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 32 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 32 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 32 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 32 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 32 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 32 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 32 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 32 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 32 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 32 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 32 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 32 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 32 (statement_matched -> Return expression Semi .)


state 109

    (78) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 135


state 110

    (62) logical_or -> logical_or Or logical_and .
    (63) logical_and -> logical_and . And bit_or

    Question        reduce using rule 62 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 62 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 62 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 62 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 62 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 62 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 76


state 111

    (63) logical_and -> logical_and And bit_or .
    (64) bit_or -> bit_or . BitOr xor

    And             reduce using rule 63 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 63 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 63 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 63 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 63 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 63 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 63 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 77


state 112

    (64) bit_or -> bit_or BitOr xor .
    (65) xor -> xor . Xor bit_and

    BitOr           reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 64 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 78


state 113

    (65) xor -> xor Xor bit_and .
    (66) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 65 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 65 (xor -> xor Xor bit_and .)
    And             reduce using rule 65 (xor -> xor Xor bit_and .)
    Question        reduce using rule 65 (xor -> xor Xor bit_and .)
    Or              reduce using rule 65 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 65 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 65 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 65 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 65 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 79


state 114

    (66) bit_and -> bit_and BitAnd equality .
    (67) equality -> equality . NotEqual relational
    (68) equality -> equality . Equal relational

    BitAnd          reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 66 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 80
    Equal           shift and go to state 81


state 115

    (67) equality -> equality NotEqual relational .
    (69) relational -> relational . Less additive
    (70) relational -> relational . Greater additive
    (71) relational -> relational . LessEqual additive
    (72) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 67 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 67 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 67 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 67 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 67 (equality -> equality NotEqual relational .)
    And             reduce using rule 67 (equality -> equality NotEqual relational .)
    Question        reduce using rule 67 (equality -> equality NotEqual relational .)
    Or              reduce using rule 67 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 67 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 67 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 67 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 67 (equality -> equality NotEqual relational .)
    Less            shift and go to state 82
    Greater         shift and go to state 83
    LessEqual       shift and go to state 84
    GreaterEqual    shift and go to state 85


state 116

    (68) equality -> equality Equal relational .
    (69) relational -> relational . Less additive
    (70) relational -> relational . Greater additive
    (71) relational -> relational . LessEqual additive
    (72) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 68 (equality -> equality Equal relational .)
    Equal           reduce using rule 68 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 68 (equality -> equality Equal relational .)
    Xor             reduce using rule 68 (equality -> equality Equal relational .)
    BitOr           reduce using rule 68 (equality -> equality Equal relational .)
    And             reduce using rule 68 (equality -> equality Equal relational .)
    Question        reduce using rule 68 (equality -> equality Equal relational .)
    Or              reduce using rule 68 (equality -> equality Equal relational .)
    Semi            reduce using rule 68 (equality -> equality Equal relational .)
    RParen          reduce using rule 68 (equality -> equality Equal relational .)
    Comma           reduce using rule 68 (equality -> equality Equal relational .)
    Colon           reduce using rule 68 (equality -> equality Equal relational .)
    Less            shift and go to state 82
    Greater         shift and go to state 83
    LessEqual       shift and go to state 84
    GreaterEqual    shift and go to state 85


state 117

    (69) relational -> relational Less additive .
    (73) additive -> additive . Plus multiplicative
    (74) additive -> additive . Minus multiplicative

    Less            reduce using rule 69 (relational -> relational Less additive .)
    Greater         reduce using rule 69 (relational -> relational Less additive .)
    LessEqual       reduce using rule 69 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 69 (relational -> relational Less additive .)
    NotEqual        reduce using rule 69 (relational -> relational Less additive .)
    Equal           reduce using rule 69 (relational -> relational Less additive .)
    BitAnd          reduce using rule 69 (relational -> relational Less additive .)
    Xor             reduce using rule 69 (relational -> relational Less additive .)
    BitOr           reduce using rule 69 (relational -> relational Less additive .)
    And             reduce using rule 69 (relational -> relational Less additive .)
    Question        reduce using rule 69 (relational -> relational Less additive .)
    Or              reduce using rule 69 (relational -> relational Less additive .)
    Semi            reduce using rule 69 (relational -> relational Less additive .)
    RParen          reduce using rule 69 (relational -> relational Less additive .)
    Comma           reduce using rule 69 (relational -> relational Less additive .)
    Colon           reduce using rule 69 (relational -> relational Less additive .)
    Plus            shift and go to state 86
    Minus           shift and go to state 87


state 118

    (70) relational -> relational Greater additive .
    (73) additive -> additive . Plus multiplicative
    (74) additive -> additive . Minus multiplicative

    Less            reduce using rule 70 (relational -> relational Greater additive .)
    Greater         reduce using rule 70 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 70 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 70 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 70 (relational -> relational Greater additive .)
    Equal           reduce using rule 70 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 70 (relational -> relational Greater additive .)
    Xor             reduce using rule 70 (relational -> relational Greater additive .)
    BitOr           reduce using rule 70 (relational -> relational Greater additive .)
    And             reduce using rule 70 (relational -> relational Greater additive .)
    Question        reduce using rule 70 (relational -> relational Greater additive .)
    Or              reduce using rule 70 (relational -> relational Greater additive .)
    Semi            reduce using rule 70 (relational -> relational Greater additive .)
    RParen          reduce using rule 70 (relational -> relational Greater additive .)
    Comma           reduce using rule 70 (relational -> relational Greater additive .)
    Colon           reduce using rule 70 (relational -> relational Greater additive .)
    Plus            shift and go to state 86
    Minus           shift and go to state 87


state 119

    (71) relational -> relational LessEqual additive .
    (73) additive -> additive . Plus multiplicative
    (74) additive -> additive . Minus multiplicative

    Less            reduce using rule 71 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 71 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 71 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 71 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 71 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 71 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 71 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 71 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 71 (relational -> relational LessEqual additive .)
    And             reduce using rule 71 (relational -> relational LessEqual additive .)
    Question        reduce using rule 71 (relational -> relational LessEqual additive .)
    Or              reduce using rule 71 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 71 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 71 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 71 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 71 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 86
    Minus           shift and go to state 87


state 120

    (72) relational -> relational GreaterEqual additive .
    (73) additive -> additive . Plus multiplicative
    (74) additive -> additive . Minus multiplicative

    Less            reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 72 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 72 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 72 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 72 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 72 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 72 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 72 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 72 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 86
    Minus           shift and go to state 87


state 121

    (73) additive -> additive Plus multiplicative .
    (75) multiplicative -> multiplicative . Mul unary
    (76) multiplicative -> multiplicative . Div unary
    (77) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 73 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 73 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 73 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 73 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 73 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 73 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 73 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 73 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 73 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 73 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 73 (additive -> additive Plus multiplicative .)
    And             reduce using rule 73 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 73 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 73 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 73 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 73 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 73 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 73 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 88
    Div             shift and go to state 89
    Mod             shift and go to state 90


state 122

    (74) additive -> additive Minus multiplicative .
    (75) multiplicative -> multiplicative . Mul unary
    (76) multiplicative -> multiplicative . Div unary
    (77) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 74 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 74 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 74 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 74 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 74 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 74 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 74 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 74 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 74 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 74 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 74 (additive -> additive Minus multiplicative .)
    And             reduce using rule 74 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 74 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 74 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 74 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 74 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 74 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 74 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 88
    Div             shift and go to state 89
    Mod             shift and go to state 90


state 123

    (75) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 75 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 75 (multiplicative -> multiplicative Mul unary .)


state 124

    (76) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 76 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 76 (multiplicative -> multiplicative Div unary .)


state 125

    (77) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 77 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 77 (multiplicative -> multiplicative Mod unary .)


state 126

    (39) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 39 (declaration -> type Identifier Assign expression .)


state 127

    (57) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 57 (postfix -> Identifier LParen expression_list RParen .)


state 128

    (40) expression_list -> expression Comma . expression_list
    (40) expression_list -> . expression Comma expression_list
    (41) expression_list -> . expression
    (42) expression_list -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 98
    expression_list                shift and go to state 136
    empty                          shift and go to state 99
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 129

    (17) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen expression RParen . statement
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 31
    statement_matched              shift and go to state 137
    statement_unmatched            shift and go to state 30
    statement                      shift and go to state 138
    opt_expression                 shift and go to state 35
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 130

    (20) statement_matched -> While LParen expression RParen . statement_matched
    (21) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 31
    statement_matched              shift and go to state 139
    statement_unmatched            shift and go to state 140
    opt_expression                 shift and go to state 35
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 131

    (22) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    opt_expression                 shift and go to state 141
    expression                     shift and go to state 31
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 132

    (23) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    opt_expression                 shift and go to state 142
    expression                     shift and go to state 31
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 133

    (28) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (30) statement_unmatched -> Do statement_matched While LParen . expression RParen Semi
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 143
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 134

    (29) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (43) expression -> . assignment
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 144
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 135

    (78) conditional -> logical_or Question expression Colon . conditional
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Identifier      shift and go to state 92
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    logical_or                     shift and go to state 43
    conditional                    shift and go to state 145
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 136

    (40) expression_list -> expression Comma expression_list .

    RParen          reduce using rule 40 (expression_list -> expression Comma expression_list .)


state 137

    (17) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (18) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (15) statement -> statement_matched .

    Else            shift and go to state 146
    RBrace          reduce using rule 15 (statement -> statement_matched .)
    If              reduce using rule 15 (statement -> statement_matched .)
    While           reduce using rule 15 (statement -> statement_matched .)
    For             reduce using rule 15 (statement -> statement_matched .)
    Do              reduce using rule 15 (statement -> statement_matched .)
    Continue        reduce using rule 15 (statement -> statement_matched .)
    Return          reduce using rule 15 (statement -> statement_matched .)
    LBrace          reduce using rule 15 (statement -> statement_matched .)
    Break           reduce using rule 15 (statement -> statement_matched .)
    Int             reduce using rule 15 (statement -> statement_matched .)
    Identifier      reduce using rule 15 (statement -> statement_matched .)
    Minus           reduce using rule 15 (statement -> statement_matched .)
    BitNot          reduce using rule 15 (statement -> statement_matched .)
    Not             reduce using rule 15 (statement -> statement_matched .)
    Integer         reduce using rule 15 (statement -> statement_matched .)
    LParen          reduce using rule 15 (statement -> statement_matched .)
    Semi            reduce using rule 15 (statement -> statement_matched .)


state 138

    (19) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)


state 139

    (20) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)


state 140

    (21) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 141

    (22) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 147


state 142

    (23) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 148


state 143

    (28) statement_matched -> Do statement_matched While LParen expression . RParen Semi
    (30) statement_unmatched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 149


state 144

    (29) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 150


state 145

    (78) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 78 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 78 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 78 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 78 (conditional -> logical_or Question expression Colon conditional .)


state 146

    (17) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (18) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    expression                     shift and go to state 31
    statement_matched              shift and go to state 151
    statement_unmatched            shift and go to state 152
    opt_expression                 shift and go to state 35
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 147

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    opt_expression                 shift and go to state 153
    expression                     shift and go to state 31
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 148

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    opt_expression                 shift and go to state 154
    expression                     shift and go to state 31
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 149

    (28) statement_matched -> Do statement_matched While LParen expression RParen . Semi
    (30) statement_unmatched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 155


state 150

    (29) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 156


state 151

    (17) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 152

    (18) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 153

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 157


state 154

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_unmatched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 158


state 155

    (28) statement_matched -> Do statement_matched While LParen expression RParen Semi .
    (30) statement_unmatched -> Do statement_matched While LParen expression RParen Semi .

  ! reduce/reduce conflict for RBrace resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for If resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for While resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for For resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Do resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Continue resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Return resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for LBrace resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Break resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Int resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Identifier resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Minus resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for BitNot resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Not resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Integer resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for LParen resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Semi resolved using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    RBrace          reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 28 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)

  ! RBrace          [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! If              [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! While           [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! For             [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Do              [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Continue        [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Return          [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! LBrace          [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Break           [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Int             [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Identifier      [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Minus           [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! BitNot          [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Not             [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Integer         [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! LParen          [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Semi            [ reduce using rule 30 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]


state 156

    (29) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 29 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 157

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    opt_expression                 shift and go to state 35
    statement_matched              shift and go to state 159
    statement_unmatched            shift and go to state 160
    expression                     shift and go to state 31
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 158

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (28) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (31) statement_matched -> . Continue Semi
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (36) opt_expression -> . expression
    (37) opt_expression -> . empty
    (43) expression -> . assignment
    (1) empty -> .
    (44) assignment -> . conditional
    (61) assignment -> . Identifier Assign expression
    (45) conditional -> . logical_or
    (78) conditional -> . logical_or Question expression Colon conditional
    (46) logical_or -> . logical_and
    (62) logical_or -> . logical_or Or logical_and
    (47) logical_and -> . bit_or
    (63) logical_and -> . logical_and And bit_or
    (48) bit_or -> . xor
    (64) bit_or -> . bit_or BitOr xor
    (49) xor -> . bit_and
    (65) xor -> . xor Xor bit_and
    (50) bit_and -> . equality
    (66) bit_and -> . bit_and BitAnd equality
    (51) equality -> . relational
    (67) equality -> . equality NotEqual relational
    (68) equality -> . equality Equal relational
    (52) relational -> . additive
    (69) relational -> . relational Less additive
    (70) relational -> . relational Greater additive
    (71) relational -> . relational LessEqual additive
    (72) relational -> . relational GreaterEqual additive
    (53) additive -> . multiplicative
    (73) additive -> . additive Plus multiplicative
    (74) additive -> . additive Minus multiplicative
    (54) multiplicative -> . unary
    (75) multiplicative -> . multiplicative Mul unary
    (76) multiplicative -> . multiplicative Div unary
    (77) multiplicative -> . multiplicative Mod unary
    (55) unary -> . postfix
    (58) unary -> . Minus unary
    (59) unary -> . BitNot unary
    (60) unary -> . Not unary
    (56) postfix -> . primary
    (57) postfix -> . Identifier LParen expression_list RParen
    (79) primary -> . Integer
    (80) primary -> . Identifier
    (81) primary -> . LParen expression RParen

    If              shift and go to state 32
    While           shift and go to state 33
    For             shift and go to state 34
    Do              shift and go to state 36
    Continue        shift and go to state 37
    Return          shift and go to state 38
    LBrace          shift and go to state 24
    Break           shift and go to state 39
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 22
    Minus           shift and go to state 52
    BitNot          shift and go to state 55
    Not             shift and go to state 56
    Integer         shift and go to state 58
    LParen          shift and go to state 23

    opt_expression                 shift and go to state 35
    statement_matched              shift and go to state 161
    statement_unmatched            shift and go to state 162
    expression                     shift and go to state 31
    empty                          shift and go to state 40
    assignment                     shift and go to state 41
    conditional                    shift and go to state 42
    logical_or                     shift and go to state 43
    logical_and                    shift and go to state 44
    bit_or                         shift and go to state 45
    xor                            shift and go to state 46
    bit_and                        shift and go to state 47
    equality                       shift and go to state 48
    relational                     shift and go to state 49
    additive                       shift and go to state 50
    multiplicative                 shift and go to state 51
    unary                          shift and go to state 53
    postfix                        shift and go to state 54
    primary                        shift and go to state 57

state 159

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

  ! reduce/reduce conflict for RBrace resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for If resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for While resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for For resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Do resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Continue resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Return resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LBrace resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Break resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Int resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Identifier resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Minus resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for BitNot resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Not resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Integer resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LParen resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Semi resolved using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    RBrace          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)

  ! RBrace          [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! If              [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! While           [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! For             [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Do              [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Continue        [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Return          [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LBrace          [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Break           [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Int             [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Identifier      [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Minus           [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! BitNot          [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Not             [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Integer         [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LParen          [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Semi            [ reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]


state 160

    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 161

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

  ! reduce/reduce conflict for RBrace resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for If resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for While resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for For resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Do resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Continue resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Return resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LBrace resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Break resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Int resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Identifier resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Minus resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for BitNot resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Not resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Integer resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LParen resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Semi resolved using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    RBrace          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)

  ! RBrace          [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! If              [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! While           [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! For             [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Do              [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Continue        [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Return          [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LBrace          [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Break           [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Int             [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Identifier      [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Minus           [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! BitNot          [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Not             [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Integer         [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LParen          [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Semi            [ reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]


state 162

    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 155 resolved using rule (statement_matched -> Do statement_matched While LParen expression RParen Semi)
WARNING: rejected rule (statement_unmatched -> Do statement_matched While LParen expression RParen Semi) in state 155
WARNING: reduce/reduce conflict in state 159 resolved using rule (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched)
WARNING: rejected rule (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched) in state 159
WARNING: reduce/reduce conflict in state 161 resolved using rule (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched)
WARNING: rejected rule (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched) in state 161
WARNING: Rule (statement_unmatched -> Do statement_matched While LParen expression RParen Semi) is never reduced
WARNING: Rule (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched) is never reduced
WARNING: Rule (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched) is never reduced
