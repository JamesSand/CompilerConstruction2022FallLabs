Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     type -> Int
Rule 3     program -> function_list
Rule 4     function_list -> declaration Semi function_list
Rule 5     function_list -> function function_list
Rule 6     function_list -> empty
Rule 7     function -> type Identifier LParen parameter_list RParen LBrace block RBrace
Rule 8     function -> type Identifier LParen parameter_list RParen Semi
Rule 9     parameter_list -> parameter Comma parameter_list
Rule 10    parameter_list -> parameter
Rule 11    parameter_list -> empty
Rule 12    parameter -> type Identifier
Rule 13    block -> block block_item
Rule 14    block -> empty
Rule 15    block_item -> statement
Rule 16    block_item -> declaration Semi
Rule 17    statement -> statement_matched
Rule 18    statement -> statement_unmatched
Rule 19    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 20    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 21    statement_unmatched -> If LParen expression RParen statement
Rule 22    statement_matched -> While LParen expression RParen statement_matched
Rule 23    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 24    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 25    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 26    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 27    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 28    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 29    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 30    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 31    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 32    statement_unmatched -> Do statement_matched While LParen expression RParen Semi
Rule 33    statement_matched -> Continue Semi
Rule 34    statement_matched -> Return expression Semi
Rule 35    statement_matched -> opt_expression Semi
Rule 36    statement_matched -> LBrace block RBrace
Rule 37    statement_matched -> Break Semi
Rule 38    opt_expression -> expression
Rule 39    opt_expression -> empty
Rule 40    declaration -> type Identifier
Rule 41    declaration -> type Identifier Assign expression
Rule 42    expression_list -> expression Comma expression_list
Rule 43    expression_list -> expression
Rule 44    expression_list -> empty
Rule 45    expression -> assignment
Rule 46    assignment -> conditional
Rule 47    conditional -> logical_or
Rule 48    logical_or -> logical_and
Rule 49    logical_and -> bit_or
Rule 50    bit_or -> xor
Rule 51    xor -> bit_and
Rule 52    bit_and -> equality
Rule 53    equality -> relational
Rule 54    relational -> additive
Rule 55    additive -> multiplicative
Rule 56    multiplicative -> unary
Rule 57    unary -> postfix
Rule 58    postfix -> primary
Rule 59    postfix -> Identifier LParen expression_list RParen
Rule 60    unary -> Minus unary
Rule 61    unary -> BitNot unary
Rule 62    unary -> Not unary
Rule 63    assignment -> Identifier Assign expression
Rule 64    logical_or -> logical_or Or logical_and
Rule 65    logical_and -> logical_and And bit_or
Rule 66    bit_or -> bit_or BitOr xor
Rule 67    xor -> xor Xor bit_and
Rule 68    bit_and -> bit_and BitAnd equality
Rule 69    equality -> equality NotEqual relational
Rule 70    equality -> equality Equal relational
Rule 71    relational -> relational Less additive
Rule 72    relational -> relational Greater additive
Rule 73    relational -> relational LessEqual additive
Rule 74    relational -> relational GreaterEqual additive
Rule 75    additive -> additive Plus multiplicative
Rule 76    additive -> additive Minus multiplicative
Rule 77    multiplicative -> multiplicative Mul unary
Rule 78    multiplicative -> multiplicative Div unary
Rule 79    multiplicative -> multiplicative Mod unary
Rule 80    conditional -> logical_or Question expression Colon conditional
Rule 81    primary -> Integer
Rule 82    primary -> Identifier
Rule 83    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 65
Assign               : 41 63
BitAnd               : 68
BitNot               : 61
BitOr                : 66
Break                : 37
Colon                : 80
Comma                : 9 42
Continue             : 33
Div                  : 78
Do                   : 30 31 32
Else                 : 19 20
Equal                : 70
For                  : 24 25 26 27 28 29
Greater              : 72
GreaterEqual         : 74
Identifier           : 7 8 12 40 41 59 63 82
If                   : 19 20 21
Int                  : 2
Integer              : 81
LBrace               : 7 36
LParen               : 7 8 19 20 21 22 23 24 25 26 27 28 29 30 31 32 59 83
Less                 : 71
LessEqual            : 73
Minus                : 60 76
Mod                  : 79
Mul                  : 77
Not                  : 62
NotEqual             : 69
Or                   : 64
Plus                 : 75
Question             : 80
RBrace               : 7 36
RParen               : 7 8 19 20 21 22 23 24 25 26 27 28 29 30 31 32 59 83
Return               : 34
Semi                 : 4 8 16 24 24 25 25 26 26 27 27 28 28 29 29 30 31 32 33 34 35 37
While                : 22 23 30 31 32
Xor                  : 67
error                : 

Nonterminals, with rules where they appear

additive             : 54 71 72 73 74 75 76
assignment           : 45
bit_and              : 51 67 68
bit_or               : 49 65 66
block                : 7 13 36
block_item           : 13
conditional          : 46 80
declaration          : 4 16 25 27 29
empty                : 6 11 14 39 44
equality             : 52 68 69 70
expression           : 19 20 21 22 23 30 31 32 34 38 41 42 43 63 80 83
expression_list      : 42 59
function             : 5
function_list        : 3 4 5
logical_and          : 48 64 65
logical_or           : 47 64 80
multiplicative       : 55 75 76 77 78 79
opt_expression       : 24 24 24 25 25 26 26 26 27 27 28 28 28 29 29 35
parameter            : 9 10
parameter_list       : 7 8 9
postfix              : 57
primary              : 58
program              : 0
relational           : 53 69 70 71 72 73 74
statement            : 15 21
statement_matched    : 17 19 19 20 22 24 25 28 29 30 32
statement_unmatched  : 18 20 23 26 27 31
type                 : 7 8 12 40 41
unary                : 56 60 61 62 77 78 79
xor                  : 50 66 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (3) program -> . function_list
    (4) function_list -> . declaration Semi function_list
    (5) function_list -> . function function_list
    (6) function_list -> . empty
    (40) declaration -> . type Identifier
    (41) declaration -> . type Identifier Assign expression
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    program                        shift and go to state 1
    function_list                  shift and go to state 2
    declaration                    shift and go to state 3
    function                       shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (3) program -> function_list .

    $end            reduce using rule 3 (program -> function_list .)


state 3

    (4) function_list -> declaration . Semi function_list

    Semi            shift and go to state 8


state 4

    (5) function_list -> function . function_list
    (4) function_list -> . declaration Semi function_list
    (5) function_list -> . function function_list
    (6) function_list -> . empty
    (40) declaration -> . type Identifier
    (41) declaration -> . type Identifier Assign expression
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    function                       shift and go to state 4
    function_list                  shift and go to state 9
    declaration                    shift and go to state 3
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 5

    (6) function_list -> empty .

    $end            reduce using rule 6 (function_list -> empty .)


state 6

    (40) declaration -> type . Identifier
    (41) declaration -> type . Identifier Assign expression
    (7) function -> type . Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> type . Identifier LParen parameter_list RParen Semi

    Identifier      shift and go to state 10


state 7

    (2) type -> Int .

    Identifier      reduce using rule 2 (type -> Int .)


state 8

    (4) function_list -> declaration Semi . function_list
    (4) function_list -> . declaration Semi function_list
    (5) function_list -> . function function_list
    (6) function_list -> . empty
    (40) declaration -> . type Identifier
    (41) declaration -> . type Identifier Assign expression
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (1) empty -> .
    (2) type -> . Int

    $end            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    declaration                    shift and go to state 3
    function_list                  shift and go to state 11
    function                       shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 9

    (5) function_list -> function function_list .

    $end            reduce using rule 5 (function_list -> function function_list .)


state 10

    (40) declaration -> type Identifier .
    (41) declaration -> type Identifier . Assign expression
    (7) function -> type Identifier . LParen parameter_list RParen LBrace block RBrace
    (8) function -> type Identifier . LParen parameter_list RParen Semi

    Semi            reduce using rule 40 (declaration -> type Identifier .)
    Assign          shift and go to state 12
    LParen          shift and go to state 13


state 11

    (4) function_list -> declaration Semi function_list .

    $end            reduce using rule 4 (function_list -> declaration Semi function_list .)


state 12

    (41) declaration -> type Identifier Assign . expression
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 15
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 13

    (7) function -> type Identifier LParen . parameter_list RParen LBrace block RBrace
    (8) function -> type Identifier LParen . parameter_list RParen Semi
    (9) parameter_list -> . parameter Comma parameter_list
    (10) parameter_list -> . parameter
    (11) parameter_list -> . empty
    (12) parameter -> . type Identifier
    (1) empty -> .
    (2) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    type                           shift and go to state 35
    parameter_list                 shift and go to state 36
    parameter                      shift and go to state 37
    empty                          shift and go to state 38

state 14

    (63) assignment -> Identifier . Assign expression
    (59) postfix -> Identifier . LParen expression_list RParen
    (82) primary -> Identifier .

    Assign          shift and go to state 39
    LParen          shift and go to state 40
    Mul             reduce using rule 82 (primary -> Identifier .)
    Div             reduce using rule 82 (primary -> Identifier .)
    Mod             reduce using rule 82 (primary -> Identifier .)
    Plus            reduce using rule 82 (primary -> Identifier .)
    Minus           reduce using rule 82 (primary -> Identifier .)
    Less            reduce using rule 82 (primary -> Identifier .)
    Greater         reduce using rule 82 (primary -> Identifier .)
    LessEqual       reduce using rule 82 (primary -> Identifier .)
    GreaterEqual    reduce using rule 82 (primary -> Identifier .)
    NotEqual        reduce using rule 82 (primary -> Identifier .)
    Equal           reduce using rule 82 (primary -> Identifier .)
    BitAnd          reduce using rule 82 (primary -> Identifier .)
    Xor             reduce using rule 82 (primary -> Identifier .)
    BitOr           reduce using rule 82 (primary -> Identifier .)
    And             reduce using rule 82 (primary -> Identifier .)
    Question        reduce using rule 82 (primary -> Identifier .)
    Or              reduce using rule 82 (primary -> Identifier .)
    Semi            reduce using rule 82 (primary -> Identifier .)
    RParen          reduce using rule 82 (primary -> Identifier .)
    Comma           reduce using rule 82 (primary -> Identifier .)
    Colon           reduce using rule 82 (primary -> Identifier .)


state 15

    (41) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 41 (declaration -> type Identifier Assign expression .)


state 16

    (45) expression -> assignment .

    Semi            reduce using rule 45 (expression -> assignment .)
    RParen          reduce using rule 45 (expression -> assignment .)
    Comma           reduce using rule 45 (expression -> assignment .)
    Colon           reduce using rule 45 (expression -> assignment .)


state 17

    (46) assignment -> conditional .

    Semi            reduce using rule 46 (assignment -> conditional .)
    RParen          reduce using rule 46 (assignment -> conditional .)
    Comma           reduce using rule 46 (assignment -> conditional .)
    Colon           reduce using rule 46 (assignment -> conditional .)


state 18

    (47) conditional -> logical_or .
    (80) conditional -> logical_or . Question expression Colon conditional
    (64) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 47 (conditional -> logical_or .)
    RParen          reduce using rule 47 (conditional -> logical_or .)
    Comma           reduce using rule 47 (conditional -> logical_or .)
    Colon           reduce using rule 47 (conditional -> logical_or .)
    Question        shift and go to state 41
    Or              shift and go to state 42


state 19

    (48) logical_or -> logical_and .
    (65) logical_and -> logical_and . And bit_or

    Question        reduce using rule 48 (logical_or -> logical_and .)
    Or              reduce using rule 48 (logical_or -> logical_and .)
    Semi            reduce using rule 48 (logical_or -> logical_and .)
    RParen          reduce using rule 48 (logical_or -> logical_and .)
    Comma           reduce using rule 48 (logical_or -> logical_and .)
    Colon           reduce using rule 48 (logical_or -> logical_and .)
    And             shift and go to state 43


state 20

    (49) logical_and -> bit_or .
    (66) bit_or -> bit_or . BitOr xor

    And             reduce using rule 49 (logical_and -> bit_or .)
    Question        reduce using rule 49 (logical_and -> bit_or .)
    Or              reduce using rule 49 (logical_and -> bit_or .)
    Semi            reduce using rule 49 (logical_and -> bit_or .)
    RParen          reduce using rule 49 (logical_and -> bit_or .)
    Comma           reduce using rule 49 (logical_and -> bit_or .)
    Colon           reduce using rule 49 (logical_and -> bit_or .)
    BitOr           shift and go to state 44


state 21

    (50) bit_or -> xor .
    (67) xor -> xor . Xor bit_and

    BitOr           reduce using rule 50 (bit_or -> xor .)
    And             reduce using rule 50 (bit_or -> xor .)
    Question        reduce using rule 50 (bit_or -> xor .)
    Or              reduce using rule 50 (bit_or -> xor .)
    Semi            reduce using rule 50 (bit_or -> xor .)
    RParen          reduce using rule 50 (bit_or -> xor .)
    Comma           reduce using rule 50 (bit_or -> xor .)
    Colon           reduce using rule 50 (bit_or -> xor .)
    Xor             shift and go to state 45


state 22

    (51) xor -> bit_and .
    (68) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 51 (xor -> bit_and .)
    BitOr           reduce using rule 51 (xor -> bit_and .)
    And             reduce using rule 51 (xor -> bit_and .)
    Question        reduce using rule 51 (xor -> bit_and .)
    Or              reduce using rule 51 (xor -> bit_and .)
    Semi            reduce using rule 51 (xor -> bit_and .)
    RParen          reduce using rule 51 (xor -> bit_and .)
    Comma           reduce using rule 51 (xor -> bit_and .)
    Colon           reduce using rule 51 (xor -> bit_and .)
    BitAnd          shift and go to state 46


state 23

    (52) bit_and -> equality .
    (69) equality -> equality . NotEqual relational
    (70) equality -> equality . Equal relational

    BitAnd          reduce using rule 52 (bit_and -> equality .)
    Xor             reduce using rule 52 (bit_and -> equality .)
    BitOr           reduce using rule 52 (bit_and -> equality .)
    And             reduce using rule 52 (bit_and -> equality .)
    Question        reduce using rule 52 (bit_and -> equality .)
    Or              reduce using rule 52 (bit_and -> equality .)
    Semi            reduce using rule 52 (bit_and -> equality .)
    RParen          reduce using rule 52 (bit_and -> equality .)
    Comma           reduce using rule 52 (bit_and -> equality .)
    Colon           reduce using rule 52 (bit_and -> equality .)
    NotEqual        shift and go to state 47
    Equal           shift and go to state 48


state 24

    (53) equality -> relational .
    (71) relational -> relational . Less additive
    (72) relational -> relational . Greater additive
    (73) relational -> relational . LessEqual additive
    (74) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 53 (equality -> relational .)
    Equal           reduce using rule 53 (equality -> relational .)
    BitAnd          reduce using rule 53 (equality -> relational .)
    Xor             reduce using rule 53 (equality -> relational .)
    BitOr           reduce using rule 53 (equality -> relational .)
    And             reduce using rule 53 (equality -> relational .)
    Question        reduce using rule 53 (equality -> relational .)
    Or              reduce using rule 53 (equality -> relational .)
    Semi            reduce using rule 53 (equality -> relational .)
    RParen          reduce using rule 53 (equality -> relational .)
    Comma           reduce using rule 53 (equality -> relational .)
    Colon           reduce using rule 53 (equality -> relational .)
    Less            shift and go to state 49
    Greater         shift and go to state 50
    LessEqual       shift and go to state 51
    GreaterEqual    shift and go to state 52


state 25

    (54) relational -> additive .
    (75) additive -> additive . Plus multiplicative
    (76) additive -> additive . Minus multiplicative

    Less            reduce using rule 54 (relational -> additive .)
    Greater         reduce using rule 54 (relational -> additive .)
    LessEqual       reduce using rule 54 (relational -> additive .)
    GreaterEqual    reduce using rule 54 (relational -> additive .)
    NotEqual        reduce using rule 54 (relational -> additive .)
    Equal           reduce using rule 54 (relational -> additive .)
    BitAnd          reduce using rule 54 (relational -> additive .)
    Xor             reduce using rule 54 (relational -> additive .)
    BitOr           reduce using rule 54 (relational -> additive .)
    And             reduce using rule 54 (relational -> additive .)
    Question        reduce using rule 54 (relational -> additive .)
    Or              reduce using rule 54 (relational -> additive .)
    Semi            reduce using rule 54 (relational -> additive .)
    RParen          reduce using rule 54 (relational -> additive .)
    Comma           reduce using rule 54 (relational -> additive .)
    Colon           reduce using rule 54 (relational -> additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54


state 26

    (55) additive -> multiplicative .
    (77) multiplicative -> multiplicative . Mul unary
    (78) multiplicative -> multiplicative . Div unary
    (79) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 55 (additive -> multiplicative .)
    Minus           reduce using rule 55 (additive -> multiplicative .)
    Less            reduce using rule 55 (additive -> multiplicative .)
    Greater         reduce using rule 55 (additive -> multiplicative .)
    LessEqual       reduce using rule 55 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 55 (additive -> multiplicative .)
    NotEqual        reduce using rule 55 (additive -> multiplicative .)
    Equal           reduce using rule 55 (additive -> multiplicative .)
    BitAnd          reduce using rule 55 (additive -> multiplicative .)
    Xor             reduce using rule 55 (additive -> multiplicative .)
    BitOr           reduce using rule 55 (additive -> multiplicative .)
    And             reduce using rule 55 (additive -> multiplicative .)
    Question        reduce using rule 55 (additive -> multiplicative .)
    Or              reduce using rule 55 (additive -> multiplicative .)
    Semi            reduce using rule 55 (additive -> multiplicative .)
    RParen          reduce using rule 55 (additive -> multiplicative .)
    Comma           reduce using rule 55 (additive -> multiplicative .)
    Colon           reduce using rule 55 (additive -> multiplicative .)
    Mul             shift and go to state 55
    Div             shift and go to state 56
    Mod             shift and go to state 57


state 27

    (60) unary -> Minus . unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 58
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 28

    (56) multiplicative -> unary .

    Mul             reduce using rule 56 (multiplicative -> unary .)
    Div             reduce using rule 56 (multiplicative -> unary .)
    Mod             reduce using rule 56 (multiplicative -> unary .)
    Plus            reduce using rule 56 (multiplicative -> unary .)
    Minus           reduce using rule 56 (multiplicative -> unary .)
    Less            reduce using rule 56 (multiplicative -> unary .)
    Greater         reduce using rule 56 (multiplicative -> unary .)
    LessEqual       reduce using rule 56 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 56 (multiplicative -> unary .)
    NotEqual        reduce using rule 56 (multiplicative -> unary .)
    Equal           reduce using rule 56 (multiplicative -> unary .)
    BitAnd          reduce using rule 56 (multiplicative -> unary .)
    Xor             reduce using rule 56 (multiplicative -> unary .)
    BitOr           reduce using rule 56 (multiplicative -> unary .)
    And             reduce using rule 56 (multiplicative -> unary .)
    Question        reduce using rule 56 (multiplicative -> unary .)
    Or              reduce using rule 56 (multiplicative -> unary .)
    Semi            reduce using rule 56 (multiplicative -> unary .)
    RParen          reduce using rule 56 (multiplicative -> unary .)
    Comma           reduce using rule 56 (multiplicative -> unary .)
    Colon           reduce using rule 56 (multiplicative -> unary .)


state 29

    (57) unary -> postfix .

    Mul             reduce using rule 57 (unary -> postfix .)
    Div             reduce using rule 57 (unary -> postfix .)
    Mod             reduce using rule 57 (unary -> postfix .)
    Plus            reduce using rule 57 (unary -> postfix .)
    Minus           reduce using rule 57 (unary -> postfix .)
    Less            reduce using rule 57 (unary -> postfix .)
    Greater         reduce using rule 57 (unary -> postfix .)
    LessEqual       reduce using rule 57 (unary -> postfix .)
    GreaterEqual    reduce using rule 57 (unary -> postfix .)
    NotEqual        reduce using rule 57 (unary -> postfix .)
    Equal           reduce using rule 57 (unary -> postfix .)
    BitAnd          reduce using rule 57 (unary -> postfix .)
    Xor             reduce using rule 57 (unary -> postfix .)
    BitOr           reduce using rule 57 (unary -> postfix .)
    And             reduce using rule 57 (unary -> postfix .)
    Question        reduce using rule 57 (unary -> postfix .)
    Or              reduce using rule 57 (unary -> postfix .)
    Semi            reduce using rule 57 (unary -> postfix .)
    RParen          reduce using rule 57 (unary -> postfix .)
    Comma           reduce using rule 57 (unary -> postfix .)
    Colon           reduce using rule 57 (unary -> postfix .)


state 30

    (61) unary -> BitNot . unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 60
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 31

    (62) unary -> Not . unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 61
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 32

    (58) postfix -> primary .

    Mul             reduce using rule 58 (postfix -> primary .)
    Div             reduce using rule 58 (postfix -> primary .)
    Mod             reduce using rule 58 (postfix -> primary .)
    Plus            reduce using rule 58 (postfix -> primary .)
    Minus           reduce using rule 58 (postfix -> primary .)
    Less            reduce using rule 58 (postfix -> primary .)
    Greater         reduce using rule 58 (postfix -> primary .)
    LessEqual       reduce using rule 58 (postfix -> primary .)
    GreaterEqual    reduce using rule 58 (postfix -> primary .)
    NotEqual        reduce using rule 58 (postfix -> primary .)
    Equal           reduce using rule 58 (postfix -> primary .)
    BitAnd          reduce using rule 58 (postfix -> primary .)
    Xor             reduce using rule 58 (postfix -> primary .)
    BitOr           reduce using rule 58 (postfix -> primary .)
    And             reduce using rule 58 (postfix -> primary .)
    Question        reduce using rule 58 (postfix -> primary .)
    Or              reduce using rule 58 (postfix -> primary .)
    Semi            reduce using rule 58 (postfix -> primary .)
    RParen          reduce using rule 58 (postfix -> primary .)
    Comma           reduce using rule 58 (postfix -> primary .)
    Colon           reduce using rule 58 (postfix -> primary .)


state 33

    (83) primary -> LParen . expression RParen
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 62
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 34

    (81) primary -> Integer .

    Mul             reduce using rule 81 (primary -> Integer .)
    Div             reduce using rule 81 (primary -> Integer .)
    Mod             reduce using rule 81 (primary -> Integer .)
    Plus            reduce using rule 81 (primary -> Integer .)
    Minus           reduce using rule 81 (primary -> Integer .)
    Less            reduce using rule 81 (primary -> Integer .)
    Greater         reduce using rule 81 (primary -> Integer .)
    LessEqual       reduce using rule 81 (primary -> Integer .)
    GreaterEqual    reduce using rule 81 (primary -> Integer .)
    NotEqual        reduce using rule 81 (primary -> Integer .)
    Equal           reduce using rule 81 (primary -> Integer .)
    BitAnd          reduce using rule 81 (primary -> Integer .)
    Xor             reduce using rule 81 (primary -> Integer .)
    BitOr           reduce using rule 81 (primary -> Integer .)
    And             reduce using rule 81 (primary -> Integer .)
    Question        reduce using rule 81 (primary -> Integer .)
    Or              reduce using rule 81 (primary -> Integer .)
    Semi            reduce using rule 81 (primary -> Integer .)
    RParen          reduce using rule 81 (primary -> Integer .)
    Comma           reduce using rule 81 (primary -> Integer .)
    Colon           reduce using rule 81 (primary -> Integer .)


state 35

    (12) parameter -> type . Identifier

    Identifier      shift and go to state 63


state 36

    (7) function -> type Identifier LParen parameter_list . RParen LBrace block RBrace
    (8) function -> type Identifier LParen parameter_list . RParen Semi

    RParen          shift and go to state 64


state 37

    (9) parameter_list -> parameter . Comma parameter_list
    (10) parameter_list -> parameter .

    Comma           shift and go to state 65
    RParen          reduce using rule 10 (parameter_list -> parameter .)


state 38

    (11) parameter_list -> empty .

    RParen          reduce using rule 11 (parameter_list -> empty .)


state 39

    (63) assignment -> Identifier Assign . expression
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 66
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 40

    (59) postfix -> Identifier LParen . expression_list RParen
    (42) expression_list -> . expression Comma expression_list
    (43) expression_list -> . expression
    (44) expression_list -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression_list                shift and go to state 67
    expression                     shift and go to state 68
    empty                          shift and go to state 69
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 41

    (80) conditional -> logical_or Question . expression Colon conditional
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    logical_or                     shift and go to state 18
    expression                     shift and go to state 70
    conditional                    shift and go to state 17
    assignment                     shift and go to state 16
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 42

    (64) logical_or -> logical_or Or . logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    logical_and                    shift and go to state 71
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 43

    (65) logical_and -> logical_and And . bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    bit_or                         shift and go to state 72
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 44

    (66) bit_or -> bit_or BitOr . xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    xor                            shift and go to state 73
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 45

    (67) xor -> xor Xor . bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    bit_and                        shift and go to state 74
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 46

    (68) bit_and -> bit_and BitAnd . equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    equality                       shift and go to state 75
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 47

    (69) equality -> equality NotEqual . relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    relational                     shift and go to state 76
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 48

    (70) equality -> equality Equal . relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    relational                     shift and go to state 77
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 49

    (71) relational -> relational Less . additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 78
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 50

    (72) relational -> relational Greater . additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 79
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 51

    (73) relational -> relational LessEqual . additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 80
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 52

    (74) relational -> relational GreaterEqual . additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 81
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 53

    (75) additive -> additive Plus . multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    multiplicative                 shift and go to state 82
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 54

    (76) additive -> additive Minus . multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    multiplicative                 shift and go to state 83
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 55

    (77) multiplicative -> multiplicative Mul . unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 84
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 56

    (78) multiplicative -> multiplicative Div . unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 85
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 57

    (79) multiplicative -> multiplicative Mod . unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 86
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 58

    (60) unary -> Minus unary .

    Mul             reduce using rule 60 (unary -> Minus unary .)
    Div             reduce using rule 60 (unary -> Minus unary .)
    Mod             reduce using rule 60 (unary -> Minus unary .)
    Plus            reduce using rule 60 (unary -> Minus unary .)
    Minus           reduce using rule 60 (unary -> Minus unary .)
    Less            reduce using rule 60 (unary -> Minus unary .)
    Greater         reduce using rule 60 (unary -> Minus unary .)
    LessEqual       reduce using rule 60 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 60 (unary -> Minus unary .)
    NotEqual        reduce using rule 60 (unary -> Minus unary .)
    Equal           reduce using rule 60 (unary -> Minus unary .)
    BitAnd          reduce using rule 60 (unary -> Minus unary .)
    Xor             reduce using rule 60 (unary -> Minus unary .)
    BitOr           reduce using rule 60 (unary -> Minus unary .)
    And             reduce using rule 60 (unary -> Minus unary .)
    Question        reduce using rule 60 (unary -> Minus unary .)
    Or              reduce using rule 60 (unary -> Minus unary .)
    Semi            reduce using rule 60 (unary -> Minus unary .)
    RParen          reduce using rule 60 (unary -> Minus unary .)
    Comma           reduce using rule 60 (unary -> Minus unary .)
    Colon           reduce using rule 60 (unary -> Minus unary .)


state 59

    (59) postfix -> Identifier . LParen expression_list RParen
    (82) primary -> Identifier .

    LParen          shift and go to state 40
    Mul             reduce using rule 82 (primary -> Identifier .)
    Div             reduce using rule 82 (primary -> Identifier .)
    Mod             reduce using rule 82 (primary -> Identifier .)
    Plus            reduce using rule 82 (primary -> Identifier .)
    Minus           reduce using rule 82 (primary -> Identifier .)
    Less            reduce using rule 82 (primary -> Identifier .)
    Greater         reduce using rule 82 (primary -> Identifier .)
    LessEqual       reduce using rule 82 (primary -> Identifier .)
    GreaterEqual    reduce using rule 82 (primary -> Identifier .)
    NotEqual        reduce using rule 82 (primary -> Identifier .)
    Equal           reduce using rule 82 (primary -> Identifier .)
    BitAnd          reduce using rule 82 (primary -> Identifier .)
    Xor             reduce using rule 82 (primary -> Identifier .)
    BitOr           reduce using rule 82 (primary -> Identifier .)
    And             reduce using rule 82 (primary -> Identifier .)
    Question        reduce using rule 82 (primary -> Identifier .)
    Or              reduce using rule 82 (primary -> Identifier .)
    Semi            reduce using rule 82 (primary -> Identifier .)
    RParen          reduce using rule 82 (primary -> Identifier .)
    Comma           reduce using rule 82 (primary -> Identifier .)
    Colon           reduce using rule 82 (primary -> Identifier .)


state 60

    (61) unary -> BitNot unary .

    Mul             reduce using rule 61 (unary -> BitNot unary .)
    Div             reduce using rule 61 (unary -> BitNot unary .)
    Mod             reduce using rule 61 (unary -> BitNot unary .)
    Plus            reduce using rule 61 (unary -> BitNot unary .)
    Minus           reduce using rule 61 (unary -> BitNot unary .)
    Less            reduce using rule 61 (unary -> BitNot unary .)
    Greater         reduce using rule 61 (unary -> BitNot unary .)
    LessEqual       reduce using rule 61 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 61 (unary -> BitNot unary .)
    NotEqual        reduce using rule 61 (unary -> BitNot unary .)
    Equal           reduce using rule 61 (unary -> BitNot unary .)
    BitAnd          reduce using rule 61 (unary -> BitNot unary .)
    Xor             reduce using rule 61 (unary -> BitNot unary .)
    BitOr           reduce using rule 61 (unary -> BitNot unary .)
    And             reduce using rule 61 (unary -> BitNot unary .)
    Question        reduce using rule 61 (unary -> BitNot unary .)
    Or              reduce using rule 61 (unary -> BitNot unary .)
    Semi            reduce using rule 61 (unary -> BitNot unary .)
    RParen          reduce using rule 61 (unary -> BitNot unary .)
    Comma           reduce using rule 61 (unary -> BitNot unary .)
    Colon           reduce using rule 61 (unary -> BitNot unary .)


state 61

    (62) unary -> Not unary .

    Mul             reduce using rule 62 (unary -> Not unary .)
    Div             reduce using rule 62 (unary -> Not unary .)
    Mod             reduce using rule 62 (unary -> Not unary .)
    Plus            reduce using rule 62 (unary -> Not unary .)
    Minus           reduce using rule 62 (unary -> Not unary .)
    Less            reduce using rule 62 (unary -> Not unary .)
    Greater         reduce using rule 62 (unary -> Not unary .)
    LessEqual       reduce using rule 62 (unary -> Not unary .)
    GreaterEqual    reduce using rule 62 (unary -> Not unary .)
    NotEqual        reduce using rule 62 (unary -> Not unary .)
    Equal           reduce using rule 62 (unary -> Not unary .)
    BitAnd          reduce using rule 62 (unary -> Not unary .)
    Xor             reduce using rule 62 (unary -> Not unary .)
    BitOr           reduce using rule 62 (unary -> Not unary .)
    And             reduce using rule 62 (unary -> Not unary .)
    Question        reduce using rule 62 (unary -> Not unary .)
    Or              reduce using rule 62 (unary -> Not unary .)
    Semi            reduce using rule 62 (unary -> Not unary .)
    RParen          reduce using rule 62 (unary -> Not unary .)
    Comma           reduce using rule 62 (unary -> Not unary .)
    Colon           reduce using rule 62 (unary -> Not unary .)


state 62

    (83) primary -> LParen expression . RParen

    RParen          shift and go to state 87


state 63

    (12) parameter -> type Identifier .

    Comma           reduce using rule 12 (parameter -> type Identifier .)
    RParen          reduce using rule 12 (parameter -> type Identifier .)


state 64

    (7) function -> type Identifier LParen parameter_list RParen . LBrace block RBrace
    (8) function -> type Identifier LParen parameter_list RParen . Semi

    LBrace          shift and go to state 88
    Semi            shift and go to state 89


state 65

    (9) parameter_list -> parameter Comma . parameter_list
    (9) parameter_list -> . parameter Comma parameter_list
    (10) parameter_list -> . parameter
    (11) parameter_list -> . empty
    (12) parameter -> . type Identifier
    (1) empty -> .
    (2) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Int             shift and go to state 7

    parameter                      shift and go to state 37
    parameter_list                 shift and go to state 90
    empty                          shift and go to state 38
    type                           shift and go to state 35

state 66

    (63) assignment -> Identifier Assign expression .

    Semi            reduce using rule 63 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 63 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 63 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 63 (assignment -> Identifier Assign expression .)


state 67

    (59) postfix -> Identifier LParen expression_list . RParen

    RParen          shift and go to state 91


state 68

    (42) expression_list -> expression . Comma expression_list
    (43) expression_list -> expression .

    Comma           shift and go to state 92
    RParen          reduce using rule 43 (expression_list -> expression .)


state 69

    (44) expression_list -> empty .

    RParen          reduce using rule 44 (expression_list -> empty .)


state 70

    (80) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 93


state 71

    (64) logical_or -> logical_or Or logical_and .
    (65) logical_and -> logical_and . And bit_or

    Question        reduce using rule 64 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 64 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 64 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 64 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 64 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 64 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 43


state 72

    (65) logical_and -> logical_and And bit_or .
    (66) bit_or -> bit_or . BitOr xor

    And             reduce using rule 65 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 65 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 65 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 65 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 65 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 65 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 65 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 44


state 73

    (66) bit_or -> bit_or BitOr xor .
    (67) xor -> xor . Xor bit_and

    BitOr           reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 66 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 45


state 74

    (67) xor -> xor Xor bit_and .
    (68) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 67 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 67 (xor -> xor Xor bit_and .)
    And             reduce using rule 67 (xor -> xor Xor bit_and .)
    Question        reduce using rule 67 (xor -> xor Xor bit_and .)
    Or              reduce using rule 67 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 67 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 67 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 67 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 67 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 46


state 75

    (68) bit_and -> bit_and BitAnd equality .
    (69) equality -> equality . NotEqual relational
    (70) equality -> equality . Equal relational

    BitAnd          reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 68 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 47
    Equal           shift and go to state 48


state 76

    (69) equality -> equality NotEqual relational .
    (71) relational -> relational . Less additive
    (72) relational -> relational . Greater additive
    (73) relational -> relational . LessEqual additive
    (74) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 69 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 69 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 69 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 69 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 69 (equality -> equality NotEqual relational .)
    And             reduce using rule 69 (equality -> equality NotEqual relational .)
    Question        reduce using rule 69 (equality -> equality NotEqual relational .)
    Or              reduce using rule 69 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 69 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 69 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 69 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 69 (equality -> equality NotEqual relational .)
    Less            shift and go to state 49
    Greater         shift and go to state 50
    LessEqual       shift and go to state 51
    GreaterEqual    shift and go to state 52


state 77

    (70) equality -> equality Equal relational .
    (71) relational -> relational . Less additive
    (72) relational -> relational . Greater additive
    (73) relational -> relational . LessEqual additive
    (74) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 70 (equality -> equality Equal relational .)
    Equal           reduce using rule 70 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 70 (equality -> equality Equal relational .)
    Xor             reduce using rule 70 (equality -> equality Equal relational .)
    BitOr           reduce using rule 70 (equality -> equality Equal relational .)
    And             reduce using rule 70 (equality -> equality Equal relational .)
    Question        reduce using rule 70 (equality -> equality Equal relational .)
    Or              reduce using rule 70 (equality -> equality Equal relational .)
    Semi            reduce using rule 70 (equality -> equality Equal relational .)
    RParen          reduce using rule 70 (equality -> equality Equal relational .)
    Comma           reduce using rule 70 (equality -> equality Equal relational .)
    Colon           reduce using rule 70 (equality -> equality Equal relational .)
    Less            shift and go to state 49
    Greater         shift and go to state 50
    LessEqual       shift and go to state 51
    GreaterEqual    shift and go to state 52


state 78

    (71) relational -> relational Less additive .
    (75) additive -> additive . Plus multiplicative
    (76) additive -> additive . Minus multiplicative

    Less            reduce using rule 71 (relational -> relational Less additive .)
    Greater         reduce using rule 71 (relational -> relational Less additive .)
    LessEqual       reduce using rule 71 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 71 (relational -> relational Less additive .)
    NotEqual        reduce using rule 71 (relational -> relational Less additive .)
    Equal           reduce using rule 71 (relational -> relational Less additive .)
    BitAnd          reduce using rule 71 (relational -> relational Less additive .)
    Xor             reduce using rule 71 (relational -> relational Less additive .)
    BitOr           reduce using rule 71 (relational -> relational Less additive .)
    And             reduce using rule 71 (relational -> relational Less additive .)
    Question        reduce using rule 71 (relational -> relational Less additive .)
    Or              reduce using rule 71 (relational -> relational Less additive .)
    Semi            reduce using rule 71 (relational -> relational Less additive .)
    RParen          reduce using rule 71 (relational -> relational Less additive .)
    Comma           reduce using rule 71 (relational -> relational Less additive .)
    Colon           reduce using rule 71 (relational -> relational Less additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54


state 79

    (72) relational -> relational Greater additive .
    (75) additive -> additive . Plus multiplicative
    (76) additive -> additive . Minus multiplicative

    Less            reduce using rule 72 (relational -> relational Greater additive .)
    Greater         reduce using rule 72 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 72 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 72 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 72 (relational -> relational Greater additive .)
    Equal           reduce using rule 72 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 72 (relational -> relational Greater additive .)
    Xor             reduce using rule 72 (relational -> relational Greater additive .)
    BitOr           reduce using rule 72 (relational -> relational Greater additive .)
    And             reduce using rule 72 (relational -> relational Greater additive .)
    Question        reduce using rule 72 (relational -> relational Greater additive .)
    Or              reduce using rule 72 (relational -> relational Greater additive .)
    Semi            reduce using rule 72 (relational -> relational Greater additive .)
    RParen          reduce using rule 72 (relational -> relational Greater additive .)
    Comma           reduce using rule 72 (relational -> relational Greater additive .)
    Colon           reduce using rule 72 (relational -> relational Greater additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54


state 80

    (73) relational -> relational LessEqual additive .
    (75) additive -> additive . Plus multiplicative
    (76) additive -> additive . Minus multiplicative

    Less            reduce using rule 73 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 73 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 73 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 73 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 73 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 73 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 73 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 73 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 73 (relational -> relational LessEqual additive .)
    And             reduce using rule 73 (relational -> relational LessEqual additive .)
    Question        reduce using rule 73 (relational -> relational LessEqual additive .)
    Or              reduce using rule 73 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 73 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 73 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 73 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 73 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54


state 81

    (74) relational -> relational GreaterEqual additive .
    (75) additive -> additive . Plus multiplicative
    (76) additive -> additive . Minus multiplicative

    Less            reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 74 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 74 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 74 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 74 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 74 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 74 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 74 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 74 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 53
    Minus           shift and go to state 54


state 82

    (75) additive -> additive Plus multiplicative .
    (77) multiplicative -> multiplicative . Mul unary
    (78) multiplicative -> multiplicative . Div unary
    (79) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 75 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 75 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 75 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 75 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 75 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 75 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 75 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 75 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 75 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 75 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 75 (additive -> additive Plus multiplicative .)
    And             reduce using rule 75 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 75 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 75 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 75 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 75 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 75 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 75 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 55
    Div             shift and go to state 56
    Mod             shift and go to state 57


state 83

    (76) additive -> additive Minus multiplicative .
    (77) multiplicative -> multiplicative . Mul unary
    (78) multiplicative -> multiplicative . Div unary
    (79) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 76 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 76 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 76 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 76 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 76 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 76 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 76 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 76 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 76 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 76 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 76 (additive -> additive Minus multiplicative .)
    And             reduce using rule 76 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 76 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 76 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 76 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 76 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 76 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 76 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 55
    Div             shift and go to state 56
    Mod             shift and go to state 57


state 84

    (77) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 77 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 77 (multiplicative -> multiplicative Mul unary .)


state 85

    (78) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 78 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 78 (multiplicative -> multiplicative Div unary .)


state 86

    (79) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 79 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 79 (multiplicative -> multiplicative Mod unary .)


state 87

    (83) primary -> LParen expression RParen .

    Mul             reduce using rule 83 (primary -> LParen expression RParen .)
    Div             reduce using rule 83 (primary -> LParen expression RParen .)
    Mod             reduce using rule 83 (primary -> LParen expression RParen .)
    Plus            reduce using rule 83 (primary -> LParen expression RParen .)
    Minus           reduce using rule 83 (primary -> LParen expression RParen .)
    Less            reduce using rule 83 (primary -> LParen expression RParen .)
    Greater         reduce using rule 83 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 83 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 83 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 83 (primary -> LParen expression RParen .)
    Equal           reduce using rule 83 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 83 (primary -> LParen expression RParen .)
    Xor             reduce using rule 83 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 83 (primary -> LParen expression RParen .)
    And             reduce using rule 83 (primary -> LParen expression RParen .)
    Question        reduce using rule 83 (primary -> LParen expression RParen .)
    Or              reduce using rule 83 (primary -> LParen expression RParen .)
    Semi            reduce using rule 83 (primary -> LParen expression RParen .)
    RParen          reduce using rule 83 (primary -> LParen expression RParen .)
    Comma           reduce using rule 83 (primary -> LParen expression RParen .)
    Colon           reduce using rule 83 (primary -> LParen expression RParen .)


state 88

    (7) function -> type Identifier LParen parameter_list RParen LBrace . block RBrace
    (13) block -> . block block_item
    (14) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 94
    empty                          shift and go to state 95

state 89

    (8) function -> type Identifier LParen parameter_list RParen Semi .

    Int             reduce using rule 8 (function -> type Identifier LParen parameter_list RParen Semi .)
    $end            reduce using rule 8 (function -> type Identifier LParen parameter_list RParen Semi .)


state 90

    (9) parameter_list -> parameter Comma parameter_list .

    RParen          reduce using rule 9 (parameter_list -> parameter Comma parameter_list .)


state 91

    (59) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 59 (postfix -> Identifier LParen expression_list RParen .)


state 92

    (42) expression_list -> expression Comma . expression_list
    (42) expression_list -> . expression Comma expression_list
    (43) expression_list -> . expression
    (44) expression_list -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 68
    expression_list                shift and go to state 96
    empty                          shift and go to state 69
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 93

    (80) conditional -> logical_or Question expression Colon . conditional
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 59
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    logical_or                     shift and go to state 18
    conditional                    shift and go to state 97
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 94

    (7) function -> type Identifier LParen parameter_list RParen LBrace block . RBrace
    (13) block -> block . block_item
    (15) block_item -> . statement
    (16) block_item -> . declaration Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (40) declaration -> . type Identifier
    (41) declaration -> . type Identifier Assign expression
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (2) type -> . Int
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    RBrace          shift and go to state 100
    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Int             shift and go to state 7
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    type                           shift and go to state 98
    block_item                     shift and go to state 101
    statement                      shift and go to state 102
    declaration                    shift and go to state 103
    statement_matched              shift and go to state 104
    statement_unmatched            shift and go to state 105
    expression                     shift and go to state 106
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 95

    (14) block -> empty .

    RBrace          reduce using rule 14 (block -> empty .)
    If              reduce using rule 14 (block -> empty .)
    While           reduce using rule 14 (block -> empty .)
    For             reduce using rule 14 (block -> empty .)
    Do              reduce using rule 14 (block -> empty .)
    Continue        reduce using rule 14 (block -> empty .)
    Return          reduce using rule 14 (block -> empty .)
    LBrace          reduce using rule 14 (block -> empty .)
    Break           reduce using rule 14 (block -> empty .)
    Int             reduce using rule 14 (block -> empty .)
    Identifier      reduce using rule 14 (block -> empty .)
    Minus           reduce using rule 14 (block -> empty .)
    BitNot          reduce using rule 14 (block -> empty .)
    Not             reduce using rule 14 (block -> empty .)
    Integer         reduce using rule 14 (block -> empty .)
    LParen          reduce using rule 14 (block -> empty .)
    Semi            reduce using rule 14 (block -> empty .)


state 96

    (42) expression_list -> expression Comma expression_list .

    RParen          reduce using rule 42 (expression_list -> expression Comma expression_list .)


state 97

    (80) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 80 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 80 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 80 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 80 (conditional -> logical_or Question expression Colon conditional .)


state 98

    (40) declaration -> type . Identifier
    (41) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 116


state 99

    (36) statement_matched -> LBrace . block RBrace
    (13) block -> . block block_item
    (14) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 117
    empty                          shift and go to state 95

state 100

    (7) function -> type Identifier LParen parameter_list RParen LBrace block RBrace .

    Int             reduce using rule 7 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)
    $end            reduce using rule 7 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)


state 101

    (13) block -> block block_item .

    RBrace          reduce using rule 13 (block -> block block_item .)
    If              reduce using rule 13 (block -> block block_item .)
    While           reduce using rule 13 (block -> block block_item .)
    For             reduce using rule 13 (block -> block block_item .)
    Do              reduce using rule 13 (block -> block block_item .)
    Continue        reduce using rule 13 (block -> block block_item .)
    Return          reduce using rule 13 (block -> block block_item .)
    LBrace          reduce using rule 13 (block -> block block_item .)
    Break           reduce using rule 13 (block -> block block_item .)
    Int             reduce using rule 13 (block -> block block_item .)
    Identifier      reduce using rule 13 (block -> block block_item .)
    Minus           reduce using rule 13 (block -> block block_item .)
    BitNot          reduce using rule 13 (block -> block block_item .)
    Not             reduce using rule 13 (block -> block block_item .)
    Integer         reduce using rule 13 (block -> block block_item .)
    LParen          reduce using rule 13 (block -> block block_item .)
    Semi            reduce using rule 13 (block -> block block_item .)


state 102

    (15) block_item -> statement .

    RBrace          reduce using rule 15 (block_item -> statement .)
    If              reduce using rule 15 (block_item -> statement .)
    While           reduce using rule 15 (block_item -> statement .)
    For             reduce using rule 15 (block_item -> statement .)
    Do              reduce using rule 15 (block_item -> statement .)
    Continue        reduce using rule 15 (block_item -> statement .)
    Return          reduce using rule 15 (block_item -> statement .)
    LBrace          reduce using rule 15 (block_item -> statement .)
    Break           reduce using rule 15 (block_item -> statement .)
    Int             reduce using rule 15 (block_item -> statement .)
    Identifier      reduce using rule 15 (block_item -> statement .)
    Minus           reduce using rule 15 (block_item -> statement .)
    BitNot          reduce using rule 15 (block_item -> statement .)
    Not             reduce using rule 15 (block_item -> statement .)
    Integer         reduce using rule 15 (block_item -> statement .)
    LParen          reduce using rule 15 (block_item -> statement .)
    Semi            reduce using rule 15 (block_item -> statement .)


state 103

    (16) block_item -> declaration . Semi

    Semi            shift and go to state 118


state 104

    (17) statement -> statement_matched .

    RBrace          reduce using rule 17 (statement -> statement_matched .)
    If              reduce using rule 17 (statement -> statement_matched .)
    While           reduce using rule 17 (statement -> statement_matched .)
    For             reduce using rule 17 (statement -> statement_matched .)
    Do              reduce using rule 17 (statement -> statement_matched .)
    Continue        reduce using rule 17 (statement -> statement_matched .)
    Return          reduce using rule 17 (statement -> statement_matched .)
    LBrace          reduce using rule 17 (statement -> statement_matched .)
    Break           reduce using rule 17 (statement -> statement_matched .)
    Int             reduce using rule 17 (statement -> statement_matched .)
    Identifier      reduce using rule 17 (statement -> statement_matched .)
    Minus           reduce using rule 17 (statement -> statement_matched .)
    BitNot          reduce using rule 17 (statement -> statement_matched .)
    Not             reduce using rule 17 (statement -> statement_matched .)
    Integer         reduce using rule 17 (statement -> statement_matched .)
    LParen          reduce using rule 17 (statement -> statement_matched .)
    Semi            reduce using rule 17 (statement -> statement_matched .)


state 105

    (18) statement -> statement_unmatched .

    RBrace          reduce using rule 18 (statement -> statement_unmatched .)
    If              reduce using rule 18 (statement -> statement_unmatched .)
    While           reduce using rule 18 (statement -> statement_unmatched .)
    For             reduce using rule 18 (statement -> statement_unmatched .)
    Do              reduce using rule 18 (statement -> statement_unmatched .)
    Continue        reduce using rule 18 (statement -> statement_unmatched .)
    Return          reduce using rule 18 (statement -> statement_unmatched .)
    LBrace          reduce using rule 18 (statement -> statement_unmatched .)
    Break           reduce using rule 18 (statement -> statement_unmatched .)
    Int             reduce using rule 18 (statement -> statement_unmatched .)
    Identifier      reduce using rule 18 (statement -> statement_unmatched .)
    Minus           reduce using rule 18 (statement -> statement_unmatched .)
    BitNot          reduce using rule 18 (statement -> statement_unmatched .)
    Not             reduce using rule 18 (statement -> statement_unmatched .)
    Integer         reduce using rule 18 (statement -> statement_unmatched .)
    LParen          reduce using rule 18 (statement -> statement_unmatched .)
    Semi            reduce using rule 18 (statement -> statement_unmatched .)


state 106

    (38) opt_expression -> expression .

    Semi            reduce using rule 38 (opt_expression -> expression .)
    RParen          reduce using rule 38 (opt_expression -> expression .)


state 107

    (19) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 119


state 108

    (22) statement_matched -> While . LParen expression RParen statement_matched
    (23) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 120


state 109

    (24) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 121


state 110

    (35) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 122


state 111

    (30) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (31) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> Do . statement_matched While LParen expression RParen Semi
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    statement_matched              shift and go to state 123
    expression                     shift and go to state 106
    statement_unmatched            shift and go to state 124
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 112

    (33) statement_matched -> Continue . Semi

    Semi            shift and go to state 125


state 113

    (34) statement_matched -> Return . expression Semi
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 126
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 114

    (37) statement_matched -> Break . Semi

    Semi            shift and go to state 127


state 115

    (39) opt_expression -> empty .

    Semi            reduce using rule 39 (opt_expression -> empty .)
    RParen          reduce using rule 39 (opt_expression -> empty .)


state 116

    (40) declaration -> type Identifier .
    (41) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 40 (declaration -> type Identifier .)
    Assign          shift and go to state 12


state 117

    (36) statement_matched -> LBrace block . RBrace
    (13) block -> block . block_item
    (15) block_item -> . statement
    (16) block_item -> . declaration Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (40) declaration -> . type Identifier
    (41) declaration -> . type Identifier Assign expression
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (2) type -> . Int
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    RBrace          shift and go to state 128
    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Int             shift and go to state 7
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    block_item                     shift and go to state 101
    statement                      shift and go to state 102
    declaration                    shift and go to state 103
    statement_matched              shift and go to state 104
    statement_unmatched            shift and go to state 105
    type                           shift and go to state 98
    expression                     shift and go to state 106
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 118

    (16) block_item -> declaration Semi .

    RBrace          reduce using rule 16 (block_item -> declaration Semi .)
    If              reduce using rule 16 (block_item -> declaration Semi .)
    While           reduce using rule 16 (block_item -> declaration Semi .)
    For             reduce using rule 16 (block_item -> declaration Semi .)
    Do              reduce using rule 16 (block_item -> declaration Semi .)
    Continue        reduce using rule 16 (block_item -> declaration Semi .)
    Return          reduce using rule 16 (block_item -> declaration Semi .)
    LBrace          reduce using rule 16 (block_item -> declaration Semi .)
    Break           reduce using rule 16 (block_item -> declaration Semi .)
    Int             reduce using rule 16 (block_item -> declaration Semi .)
    Identifier      reduce using rule 16 (block_item -> declaration Semi .)
    Minus           reduce using rule 16 (block_item -> declaration Semi .)
    BitNot          reduce using rule 16 (block_item -> declaration Semi .)
    Not             reduce using rule 16 (block_item -> declaration Semi .)
    Integer         reduce using rule 16 (block_item -> declaration Semi .)
    LParen          reduce using rule 16 (block_item -> declaration Semi .)
    Semi            reduce using rule 16 (block_item -> declaration Semi .)


state 119

    (19) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen . expression RParen statement
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 129
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 120

    (22) statement_matched -> While LParen . expression RParen statement_matched
    (23) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 130
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 121

    (24) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (40) declaration -> . type Identifier
    (41) declaration -> . type Identifier Assign expression
    (45) expression -> . assignment
    (1) empty -> .
    (2) type -> . Int
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 7
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 131
    declaration                    shift and go to state 132
    expression                     shift and go to state 106
    empty                          shift and go to state 115
    type                           shift and go to state 98
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 122

    (35) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 35 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 35 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 35 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 35 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 35 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 35 (statement_matched -> opt_expression Semi .)


state 123

    (30) statement_matched -> Do statement_matched . While LParen expression RParen Semi
    (32) statement_unmatched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 133


state 124

    (31) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 134


state 125

    (33) statement_matched -> Continue Semi .

    RBrace          reduce using rule 33 (statement_matched -> Continue Semi .)
    If              reduce using rule 33 (statement_matched -> Continue Semi .)
    While           reduce using rule 33 (statement_matched -> Continue Semi .)
    For             reduce using rule 33 (statement_matched -> Continue Semi .)
    Do              reduce using rule 33 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 33 (statement_matched -> Continue Semi .)
    Return          reduce using rule 33 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 33 (statement_matched -> Continue Semi .)
    Break           reduce using rule 33 (statement_matched -> Continue Semi .)
    Int             reduce using rule 33 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 33 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 33 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 33 (statement_matched -> Continue Semi .)
    Not             reduce using rule 33 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 33 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 33 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 33 (statement_matched -> Continue Semi .)
    Else            reduce using rule 33 (statement_matched -> Continue Semi .)


state 126

    (34) statement_matched -> Return expression . Semi

    Semi            shift and go to state 135


state 127

    (37) statement_matched -> Break Semi .

    RBrace          reduce using rule 37 (statement_matched -> Break Semi .)
    If              reduce using rule 37 (statement_matched -> Break Semi .)
    While           reduce using rule 37 (statement_matched -> Break Semi .)
    For             reduce using rule 37 (statement_matched -> Break Semi .)
    Do              reduce using rule 37 (statement_matched -> Break Semi .)
    Continue        reduce using rule 37 (statement_matched -> Break Semi .)
    Return          reduce using rule 37 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 37 (statement_matched -> Break Semi .)
    Break           reduce using rule 37 (statement_matched -> Break Semi .)
    Int             reduce using rule 37 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 37 (statement_matched -> Break Semi .)
    Minus           reduce using rule 37 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 37 (statement_matched -> Break Semi .)
    Not             reduce using rule 37 (statement_matched -> Break Semi .)
    Integer         reduce using rule 37 (statement_matched -> Break Semi .)
    LParen          reduce using rule 37 (statement_matched -> Break Semi .)
    Semi            reduce using rule 37 (statement_matched -> Break Semi .)
    Else            reduce using rule 37 (statement_matched -> Break Semi .)


state 128

    (36) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 36 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 36 (statement_matched -> LBrace block RBrace .)


state 129

    (19) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 136


state 130

    (22) statement_matched -> While LParen expression . RParen statement_matched
    (23) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 137


state 131

    (24) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 138


state 132

    (25) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 139


state 133

    (30) statement_matched -> Do statement_matched While . LParen expression RParen Semi
    (32) statement_unmatched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 140


state 134

    (31) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 141


state 135

    (34) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 34 (statement_matched -> Return expression Semi .)
    If              reduce using rule 34 (statement_matched -> Return expression Semi .)
    While           reduce using rule 34 (statement_matched -> Return expression Semi .)
    For             reduce using rule 34 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 34 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 34 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 34 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 34 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 34 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 34 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 34 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 34 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 34 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 34 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 34 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 34 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 34 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 34 (statement_matched -> Return expression Semi .)


state 136

    (19) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen expression RParen . statement
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 106
    statement_matched              shift and go to state 142
    statement_unmatched            shift and go to state 105
    statement                      shift and go to state 143
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 137

    (22) statement_matched -> While LParen expression RParen . statement_matched
    (23) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 106
    statement_matched              shift and go to state 144
    statement_unmatched            shift and go to state 145
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 138

    (24) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 146
    expression                     shift and go to state 106
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 139

    (25) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 147
    expression                     shift and go to state 106
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 140

    (30) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (32) statement_unmatched -> Do statement_matched While LParen . expression RParen Semi
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 148
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 141

    (31) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (45) expression -> . assignment
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 149
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 142

    (19) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (20) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (17) statement -> statement_matched .

    Else            shift and go to state 150
    RBrace          reduce using rule 17 (statement -> statement_matched .)
    If              reduce using rule 17 (statement -> statement_matched .)
    While           reduce using rule 17 (statement -> statement_matched .)
    For             reduce using rule 17 (statement -> statement_matched .)
    Do              reduce using rule 17 (statement -> statement_matched .)
    Continue        reduce using rule 17 (statement -> statement_matched .)
    Return          reduce using rule 17 (statement -> statement_matched .)
    LBrace          reduce using rule 17 (statement -> statement_matched .)
    Break           reduce using rule 17 (statement -> statement_matched .)
    Int             reduce using rule 17 (statement -> statement_matched .)
    Identifier      reduce using rule 17 (statement -> statement_matched .)
    Minus           reduce using rule 17 (statement -> statement_matched .)
    BitNot          reduce using rule 17 (statement -> statement_matched .)
    Not             reduce using rule 17 (statement -> statement_matched .)
    Integer         reduce using rule 17 (statement -> statement_matched .)
    LParen          reduce using rule 17 (statement -> statement_matched .)
    Semi            reduce using rule 17 (statement -> statement_matched .)


state 143

    (21) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)


state 144

    (22) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)


state 145

    (23) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 146

    (24) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 151


state 147

    (25) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 152


state 148

    (30) statement_matched -> Do statement_matched While LParen expression . RParen Semi
    (32) statement_unmatched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 153


state 149

    (31) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 154


state 150

    (19) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (20) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 106
    statement_matched              shift and go to state 155
    statement_unmatched            shift and go to state 156
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 151

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 157
    expression                     shift and go to state 106
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 152

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 158
    expression                     shift and go to state 106
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 153

    (30) statement_matched -> Do statement_matched While LParen expression RParen . Semi
    (32) statement_unmatched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 159


state 154

    (31) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 160


state 155

    (19) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 156

    (20) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 157

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 161


state 158

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 162


state 159

    (30) statement_matched -> Do statement_matched While LParen expression RParen Semi .
    (32) statement_unmatched -> Do statement_matched While LParen expression RParen Semi .

  ! reduce/reduce conflict for RBrace resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for If resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for While resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for For resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Do resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Continue resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Return resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for LBrace resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Break resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Int resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Identifier resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Minus resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for BitNot resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Not resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Integer resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for LParen resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
  ! reduce/reduce conflict for Semi resolved using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    RBrace          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 30 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)

  ! RBrace          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! If              [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! While           [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! For             [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Do              [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Continue        [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Return          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! LBrace          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Break           [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Int             [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Identifier      [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Minus           [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! BitNot          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Not             [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Integer         [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! LParen          [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]
  ! Semi            [ reduce using rule 32 (statement_unmatched -> Do statement_matched While LParen expression RParen Semi .) ]


state 160

    (31) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 31 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 161

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 110
    statement_matched              shift and go to state 163
    statement_unmatched            shift and go to state 164
    expression                     shift and go to state 106
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 162

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (33) statement_matched -> . Continue Semi
    (34) statement_matched -> . Return expression Semi
    (35) statement_matched -> . opt_expression Semi
    (36) statement_matched -> . LBrace block RBrace
    (37) statement_matched -> . Break Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (26) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (32) statement_unmatched -> . Do statement_matched While LParen expression RParen Semi
    (38) opt_expression -> . expression
    (39) opt_expression -> . empty
    (45) expression -> . assignment
    (1) empty -> .
    (46) assignment -> . conditional
    (63) assignment -> . Identifier Assign expression
    (47) conditional -> . logical_or
    (80) conditional -> . logical_or Question expression Colon conditional
    (48) logical_or -> . logical_and
    (64) logical_or -> . logical_or Or logical_and
    (49) logical_and -> . bit_or
    (65) logical_and -> . logical_and And bit_or
    (50) bit_or -> . xor
    (66) bit_or -> . bit_or BitOr xor
    (51) xor -> . bit_and
    (67) xor -> . xor Xor bit_and
    (52) bit_and -> . equality
    (68) bit_and -> . bit_and BitAnd equality
    (53) equality -> . relational
    (69) equality -> . equality NotEqual relational
    (70) equality -> . equality Equal relational
    (54) relational -> . additive
    (71) relational -> . relational Less additive
    (72) relational -> . relational Greater additive
    (73) relational -> . relational LessEqual additive
    (74) relational -> . relational GreaterEqual additive
    (55) additive -> . multiplicative
    (75) additive -> . additive Plus multiplicative
    (76) additive -> . additive Minus multiplicative
    (56) multiplicative -> . unary
    (77) multiplicative -> . multiplicative Mul unary
    (78) multiplicative -> . multiplicative Div unary
    (79) multiplicative -> . multiplicative Mod unary
    (57) unary -> . postfix
    (60) unary -> . Minus unary
    (61) unary -> . BitNot unary
    (62) unary -> . Not unary
    (58) postfix -> . primary
    (59) postfix -> . Identifier LParen expression_list RParen
    (81) primary -> . Integer
    (82) primary -> . Identifier
    (83) primary -> . LParen expression RParen

    If              shift and go to state 107
    While           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 111
    Continue        shift and go to state 112
    Return          shift and go to state 113
    LBrace          shift and go to state 99
    Break           shift and go to state 114
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 110
    statement_matched              shift and go to state 165
    statement_unmatched            shift and go to state 166
    expression                     shift and go to state 106
    empty                          shift and go to state 115
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 163

    (24) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .
    (28) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

  ! reduce/reduce conflict for RBrace resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for If resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for While resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for For resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Do resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Continue resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Return resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LBrace resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Break resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Int resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Identifier resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Minus resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for BitNot resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Not resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Integer resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LParen resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Semi resolved using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    RBrace          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 24 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)

  ! RBrace          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! If              [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! While           [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! For             [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Do              [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Continue        [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Return          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LBrace          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Break           [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Int             [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Identifier      [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Minus           [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! BitNot          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Not             [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Integer         [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LParen          [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Semi            [ reduce using rule 28 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .) ]


state 164

    (26) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 26 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 165

    (25) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .
    (29) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

  ! reduce/reduce conflict for RBrace resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for If resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for While resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for For resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Do resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Continue resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Return resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LBrace resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Break resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Int resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Identifier resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Minus resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for BitNot resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Not resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Integer resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for LParen resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
  ! reduce/reduce conflict for Semi resolved using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    RBrace          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 25 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)

  ! RBrace          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! If              [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! While           [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! For             [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Do              [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Continue        [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Return          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LBrace          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Break           [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Int             [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Identifier      [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Minus           [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! BitNot          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Not             [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Integer         [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! LParen          [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]
  ! Semi            [ reduce using rule 29 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .) ]


state 166

    (27) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 27 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 159 resolved using rule (statement_matched -> Do statement_matched While LParen expression RParen Semi)
WARNING: rejected rule (statement_unmatched -> Do statement_matched While LParen expression RParen Semi) in state 159
WARNING: reduce/reduce conflict in state 163 resolved using rule (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched)
WARNING: rejected rule (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched) in state 163
WARNING: reduce/reduce conflict in state 165 resolved using rule (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched)
WARNING: rejected rule (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched) in state 165
WARNING: Rule (statement_unmatched -> Do statement_matched While LParen expression RParen Semi) is never reduced
WARNING: Rule (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched) is never reduced
WARNING: Rule (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched) is never reduced
