
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAnd Assign BitAnd BitNot BitOr Break Colon Comma Continue Div Do Else Equal For Greater GreaterEqual Identifier If Int Integer LBrace LParen Less LessEqual Minus Mod Mul Not NotEqual Or Plus Question RBrace RParen Return Semi While Xor\n    empty :\n    \n    type : Int\n    \n    program : function_list\n    \n    function_list : declaration Semi function_list\n    \n    function_list : function function_list\n    \n    function_list : empty\n    \n    function : type Identifier LParen parameter_list RParen LBrace block RBrace\n    \n    function : type Identifier LParen parameter_list RParen Semi\n    \n    parameter_list : parameter Comma parameter_list\n    \n    parameter_list : parameter\n    \n    parameter_list : empty\n    \n    parameter : type Identifier\n    \n    block : block block_item\n    \n    block : empty\n    \n    block_item : statement\n        | declaration Semi\n    \n    statement : statement_matched\n        | statement_unmatched\n    \n    statement_matched : If LParen expression RParen statement_matched Else statement_matched\n    statement_unmatched : If LParen expression RParen statement_matched Else statement_unmatched\n    \n    statement_unmatched : If LParen expression RParen statement\n    \n    statement_matched : While LParen expression RParen statement_matched\n    statement_unmatched : While LParen expression RParen statement_unmatched\n    \n    statement_matched : For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched\n        | For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched\n    statement_unmatched : For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched\n        | For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched\n        | For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched\n        | For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched\n    \n    statement_matched : Do statement_matched While LParen expression RParen Semi\n    statement_unmatched : Do statement_unmatched While LParen expression RParen Semi\n        | Do statement_matched While LParen expression RParen Semi\n    \n    statement_matched : Continue Semi\n    \n    statement_matched : Return expression Semi\n    \n    statement_matched : opt_expression Semi\n    \n    statement_matched : LBrace block RBrace\n    \n    statement_matched : Break Semi\n    \n    opt_expression : expression\n    \n    opt_expression : empty\n    \n    declaration : type Identifier\n    \n    declaration : type Identifier Assign expression\n    \n    expression_list : expression Comma expression_list \n    \n    expression_list : expression\n    \n    expression_list : empty\n    \n    expression : assignment\n    assignment : conditional\n    conditional : logical_or\n    logical_or : logical_and\n    logical_and : bit_or\n    bit_or : xor\n    xor : bit_and\n    bit_and : equality\n    equality : relational\n    relational : additive\n    additive : multiplicative\n    multiplicative : unary\n    unary : postfix\n    postfix : primary\n    \n    postfix : Identifier LParen expression_list RParen\n    \n    unary : Minus unary\n        | BitNot unary\n        | Not unary\n    \n    assignment : Identifier Assign expression\n    logical_or : logical_or Or logical_and\n    logical_and : logical_and And bit_or\n    bit_or : bit_or BitOr xor\n    xor : xor Xor bit_and\n    bit_and : bit_and BitAnd equality\n    equality : equality NotEqual relational\n        | equality Equal relational\n    relational : relational Less additive\n        | relational Greater additive\n        | relational LessEqual additive\n        | relational GreaterEqual additive\n    additive : additive Plus multiplicative\n        | additive Minus multiplicative\n    multiplicative : multiplicative Mul unary\n        | multiplicative Div unary\n        | multiplicative Mod unary\n    \n    conditional : logical_or Question expression Colon conditional\n    \n    primary : Integer\n    \n    primary : Identifier\n    \n    primary : LParen expression RParen\n    '
    
_lr_action_items = {'$end':([0,1,2,4,5,8,9,11,89,100,],[-1,0,-3,-1,-6,-1,-5,-4,-8,-7,]),'Int':([0,4,8,13,65,88,89,94,95,99,100,101,102,104,105,117,118,121,122,125,127,128,135,142,143,144,145,155,156,159,160,163,164,165,166,],[7,7,7,7,7,-1,-8,7,-14,-1,-7,-13,-15,-17,-18,7,-16,7,-35,-33,-37,-36,-34,-17,-21,-22,-23,-19,-20,-30,-31,-24,-26,-25,-27,]),'Semi':([3,10,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,32,34,58,59,60,61,64,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,94,95,97,99,101,102,103,104,105,106,110,111,112,114,115,116,117,118,121,122,125,126,127,128,131,132,135,136,137,138,139,142,143,144,145,146,147,150,153,154,155,156,159,160,161,162,163,164,165,166,],[8,-40,-82,-41,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,89,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-1,-59,-1,-14,-80,-1,-13,-15,118,-17,-18,-38,122,-1,125,127,-39,-40,-1,-16,-1,-35,-33,135,-37,-36,138,139,-34,-1,-1,-1,-1,-17,-21,-22,-23,151,152,-1,159,160,-19,-20,-30,-31,-1,-1,-24,-26,-25,-27,]),'Identifier':([6,7,12,27,30,31,33,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,88,92,93,94,95,98,99,101,102,104,105,111,113,117,118,119,120,121,122,125,127,128,135,136,137,138,139,140,141,142,143,144,145,150,151,152,155,156,159,160,161,162,163,164,165,166,],[10,-2,14,59,59,59,14,63,14,14,14,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-1,14,59,14,-14,116,-1,-13,-15,-17,-18,14,14,14,-16,14,14,14,-35,-33,-37,-36,-34,14,14,14,14,14,14,-17,-21,-22,-23,14,14,14,-19,-20,-30,-31,14,14,-24,-26,-25,-27,]),'Assign':([10,14,116,],[12,39,12,]),'LParen':([10,12,14,27,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,88,92,93,94,95,99,101,102,104,105,107,108,109,111,113,117,118,119,120,121,122,125,127,128,133,134,135,136,137,138,139,140,141,142,143,144,145,150,151,152,155,156,159,160,161,162,163,164,165,166,],[13,33,40,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,40,-1,33,33,33,-14,-1,-13,-15,-17,-18,119,120,121,33,33,33,-16,33,33,33,-35,-33,-37,-36,140,141,-34,33,33,33,33,33,33,-17,-21,-22,-23,33,33,33,-19,-20,-30,-31,33,33,-24,-26,-25,-27,]),'Minus':([12,14,25,26,27,28,29,30,31,32,33,34,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,99,101,102,104,105,111,113,117,118,119,120,121,122,125,127,128,135,136,137,138,139,140,141,142,143,144,145,150,151,152,155,156,159,160,161,162,163,164,165,166,],[27,-82,54,-55,27,-56,-57,27,27,-58,27,-81,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-60,-82,-61,-62,54,54,54,54,-75,-76,-77,-78,-79,-83,-1,-59,27,27,27,-14,-1,-13,-15,-17,-18,27,27,27,-16,27,27,27,-35,-33,-37,-36,-34,27,27,27,27,27,27,-17,-21,-22,-23,27,27,27,-19,-20,-30,-31,27,27,-24,-26,-25,-27,]),'BitNot':([12,27,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,88,92,93,94,95,99,101,102,104,105,111,113,117,118,119,120,121,122,125,127,128,135,136,137,138,139,140,141,142,143,144,145,150,151,152,155,156,159,160,161,162,163,164,165,166,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-1,30,30,30,-14,-1,-13,-15,-17,-18,30,30,30,-16,30,30,30,-35,-33,-37,-36,-34,30,30,30,30,30,30,-17,-21,-22,-23,30,30,30,-19,-20,-30,-31,30,30,-24,-26,-25,-27,]),'Not':([12,27,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,88,92,93,94,95,99,101,102,104,105,111,113,117,118,119,120,121,122,125,127,128,135,136,137,138,139,140,141,142,143,144,145,150,151,152,155,156,159,160,161,162,163,164,165,166,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-1,31,31,31,-14,-1,-13,-15,-17,-18,31,31,31,-16,31,31,31,-35,-33,-37,-36,-34,31,31,31,31,31,31,-17,-21,-22,-23,31,31,31,-19,-20,-30,-31,31,31,-24,-26,-25,-27,]),'Integer':([12,27,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,88,92,93,94,95,99,101,102,104,105,111,113,117,118,119,120,121,122,125,127,128,135,136,137,138,139,140,141,142,143,144,145,150,151,152,155,156,159,160,161,162,163,164,165,166,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-1,34,34,34,-14,-1,-13,-15,-17,-18,34,34,34,-16,34,34,34,-35,-33,-37,-36,-34,34,34,34,34,34,34,-17,-21,-22,-23,34,34,34,-19,-20,-30,-31,34,34,-24,-26,-25,-27,]),'RParen':([13,14,16,17,18,19,20,21,22,23,24,25,26,28,29,32,34,36,37,38,40,58,59,60,61,62,63,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,91,92,96,97,106,115,129,130,148,149,151,152,157,158,],[-1,-82,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,64,-10,-11,-1,-60,-82,-61,-62,87,-12,-1,-63,91,-43,-44,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-9,-59,-1,-42,-80,-38,-39,136,137,153,154,-1,-1,161,162,]),'Mul':([14,26,28,29,32,34,58,59,60,61,82,83,84,85,86,87,91,],[-82,55,-56,-57,-58,-81,-60,-82,-61,-62,55,55,-77,-78,-79,-83,-59,]),'Div':([14,26,28,29,32,34,58,59,60,61,82,83,84,85,86,87,91,],[-82,56,-56,-57,-58,-81,-60,-82,-61,-62,56,56,-77,-78,-79,-83,-59,]),'Mod':([14,26,28,29,32,34,58,59,60,61,82,83,84,85,86,87,91,],[-82,57,-56,-57,-58,-81,-60,-82,-61,-62,57,57,-77,-78,-79,-83,-59,]),'Plus':([14,25,26,28,29,32,34,58,59,60,61,78,79,80,81,82,83,84,85,86,87,91,],[-82,53,-55,-56,-57,-58,-81,-60,-82,-61,-62,53,53,53,53,-75,-76,-77,-78,-79,-83,-59,]),'Less':([14,24,25,26,28,29,32,34,58,59,60,61,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,49,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,49,49,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'Greater':([14,24,25,26,28,29,32,34,58,59,60,61,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,50,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,50,50,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'LessEqual':([14,24,25,26,28,29,32,34,58,59,60,61,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,51,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,51,51,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'GreaterEqual':([14,24,25,26,28,29,32,34,58,59,60,61,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,52,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,52,52,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'NotEqual':([14,23,24,25,26,28,29,32,34,58,59,60,61,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,47,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,47,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'Equal':([14,23,24,25,26,28,29,32,34,58,59,60,61,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,48,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,48,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'BitAnd':([14,22,23,24,25,26,28,29,32,34,58,59,60,61,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,46,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,46,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'Xor':([14,21,22,23,24,25,26,28,29,32,34,58,59,60,61,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,45,-51,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,45,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'BitOr':([14,20,21,22,23,24,25,26,28,29,32,34,58,59,60,61,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,44,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,44,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'And':([14,19,20,21,22,23,24,25,26,28,29,32,34,58,59,60,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,43,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,43,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'Question':([14,18,19,20,21,22,23,24,25,26,28,29,32,34,58,59,60,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,41,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'Or':([14,18,19,20,21,22,23,24,25,26,28,29,32,34,58,59,60,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,],[-82,42,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,]),'Comma':([14,16,17,18,19,20,21,22,23,24,25,26,28,29,32,34,37,58,59,60,61,63,66,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,97,],[-82,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,65,-60,-82,-61,-62,-12,-63,92,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,-80,]),'Colon':([14,16,17,18,19,20,21,22,23,24,25,26,28,29,32,34,58,59,60,61,66,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,97,],[-82,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-81,-60,-82,-61,-62,-63,93,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-83,-59,-80,]),'LBrace':([64,88,94,95,99,101,102,104,105,111,117,118,122,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[88,-1,99,-14,-1,-13,-15,-17,-18,99,99,-16,-35,-33,-37,-36,-34,99,99,-17,-21,-22,-23,99,-19,-20,-30,-31,99,99,-24,-26,-25,-27,]),'RBrace':([88,94,95,99,101,102,104,105,117,118,122,125,127,128,135,142,143,144,145,155,156,159,160,163,164,165,166,],[-1,100,-14,-1,-13,-15,-17,-18,128,-16,-35,-33,-37,-36,-34,-17,-21,-22,-23,-19,-20,-30,-31,-24,-26,-25,-27,]),'If':([88,94,95,99,101,102,104,105,111,117,118,122,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[-1,107,-14,-1,-13,-15,-17,-18,107,107,-16,-35,-33,-37,-36,-34,107,107,-17,-21,-22,-23,107,-19,-20,-30,-31,107,107,-24,-26,-25,-27,]),'While':([88,94,95,99,101,102,104,105,111,117,118,122,123,124,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[-1,108,-14,-1,-13,-15,-17,-18,108,108,-16,-35,133,134,-33,-37,-36,-34,108,108,-17,-21,-22,-23,108,-19,-20,-30,-31,108,108,-24,-26,-25,-27,]),'For':([88,94,95,99,101,102,104,105,111,117,118,122,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[-1,109,-14,-1,-13,-15,-17,-18,109,109,-16,-35,-33,-37,-36,-34,109,109,-17,-21,-22,-23,109,-19,-20,-30,-31,109,109,-24,-26,-25,-27,]),'Do':([88,94,95,99,101,102,104,105,111,117,118,122,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[-1,111,-14,-1,-13,-15,-17,-18,111,111,-16,-35,-33,-37,-36,-34,111,111,-17,-21,-22,-23,111,-19,-20,-30,-31,111,111,-24,-26,-25,-27,]),'Continue':([88,94,95,99,101,102,104,105,111,117,118,122,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[-1,112,-14,-1,-13,-15,-17,-18,112,112,-16,-35,-33,-37,-36,-34,112,112,-17,-21,-22,-23,112,-19,-20,-30,-31,112,112,-24,-26,-25,-27,]),'Return':([88,94,95,99,101,102,104,105,111,117,118,122,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[-1,113,-14,-1,-13,-15,-17,-18,113,113,-16,-35,-33,-37,-36,-34,113,113,-17,-21,-22,-23,113,-19,-20,-30,-31,113,113,-24,-26,-25,-27,]),'Break':([88,94,95,99,101,102,104,105,111,117,118,122,125,127,128,135,136,137,142,143,144,145,150,155,156,159,160,161,162,163,164,165,166,],[-1,114,-14,-1,-13,-15,-17,-18,114,114,-16,-35,-33,-37,-36,-34,114,114,-17,-21,-22,-23,114,-19,-20,-30,-31,114,114,-24,-26,-25,-27,]),'Else':([122,125,127,128,135,142,144,155,159,163,165,],[-35,-33,-37,-36,-34,150,-22,-19,-30,-24,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_list':([0,4,8,],[2,9,11,]),'declaration':([0,4,8,94,117,121,],[3,3,3,103,103,132,]),'function':([0,4,8,],[4,4,4,]),'empty':([0,4,8,13,40,65,88,92,94,99,111,117,121,136,137,138,139,150,151,152,161,162,],[5,5,5,38,69,38,95,69,115,95,115,115,115,115,115,115,115,115,115,115,115,115,]),'type':([0,4,8,13,65,94,117,121,],[6,6,6,35,35,98,98,98,]),'expression':([12,33,39,40,41,92,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[15,62,66,68,70,68,106,106,126,106,129,130,106,106,106,106,106,148,149,106,106,106,106,106,]),'assignment':([12,33,39,40,41,92,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'conditional':([12,33,39,40,41,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[17,17,17,17,17,17,97,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'logical_or':([12,33,39,40,41,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'logical_and':([12,33,39,40,41,42,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[19,19,19,19,19,71,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'bit_or':([12,33,39,40,41,42,43,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[20,20,20,20,20,20,72,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'xor':([12,33,39,40,41,42,43,44,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[21,21,21,21,21,21,21,73,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'bit_and':([12,33,39,40,41,42,43,44,45,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[22,22,22,22,22,22,22,22,74,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'equality':([12,33,39,40,41,42,43,44,45,46,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[23,23,23,23,23,23,23,23,23,75,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'relational':([12,33,39,40,41,42,43,44,45,46,47,48,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[24,24,24,24,24,24,24,24,24,24,76,77,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'additive':([12,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[25,25,25,25,25,25,25,25,25,25,25,25,78,79,80,81,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'multiplicative':([12,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,82,83,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'unary':([12,27,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[28,58,60,61,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,84,85,86,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'postfix':([12,27,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'primary':([12,27,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,92,93,94,111,113,117,119,120,121,136,137,138,139,140,141,150,151,152,161,162,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'parameter_list':([13,65,],[36,90,]),'parameter':([13,65,],[37,37,]),'expression_list':([40,92,],[67,96,]),'block':([88,99,],[94,117,]),'block_item':([94,117,],[101,101,]),'statement':([94,117,136,],[102,102,143,]),'statement_matched':([94,111,117,136,137,150,161,162,],[104,123,104,142,144,155,163,165,]),'statement_unmatched':([94,111,117,136,137,150,161,162,],[105,124,105,105,145,156,164,166,]),'opt_expression':([94,111,117,121,136,137,138,139,150,151,152,161,162,],[110,110,110,131,110,110,146,147,110,157,158,110,110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',37),
  ('type -> Int','type',1,'p_type','ply_parser.py',43),
  ('program -> function_list','program',1,'p_program','ply_parser.py',49),
  ('function_list -> declaration Semi function_list','function_list',3,'p_function_list_global_var','ply_parser.py',56),
  ('function_list -> function function_list','function_list',2,'p_function_list','ply_parser.py',64),
  ('function_list -> empty','function_list',1,'p_function_empty','ply_parser.py',70),
  ('function -> type Identifier LParen parameter_list RParen LBrace block RBrace','function',8,'p_function','ply_parser.py',77),
  ('function -> type Identifier LParen parameter_list RParen Semi','function',6,'p_function_declare','ply_parser.py',83),
  ('parameter_list -> parameter Comma parameter_list','parameter_list',3,'p_parameter_list','ply_parser.py',89),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list_singal','ply_parser.py',95),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list_empty','ply_parser.py',101),
  ('parameter -> type Identifier','parameter',2,'p_parameter','ply_parser.py',107),
  ('block -> block block_item','block',2,'p_block','ply_parser.py',115),
  ('block -> empty','block',1,'p_block_empty','ply_parser.py',124),
  ('block_item -> statement','block_item',1,'p_block_item','ply_parser.py',131),
  ('block_item -> declaration Semi','block_item',2,'p_block_item','ply_parser.py',132),
  ('statement -> statement_matched','statement',1,'p_statement','ply_parser.py',139),
  ('statement -> statement_unmatched','statement',1,'p_statement','ply_parser.py',140),
  ('statement_matched -> If LParen expression RParen statement_matched Else statement_matched','statement_matched',7,'p_if_else','ply_parser.py',147),
  ('statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched','statement_unmatched',7,'p_if_else','ply_parser.py',148),
  ('statement_unmatched -> If LParen expression RParen statement','statement_unmatched',5,'p_if','ply_parser.py',155),
  ('statement_matched -> While LParen expression RParen statement_matched','statement_matched',5,'p_while','ply_parser.py',162),
  ('statement_unmatched -> While LParen expression RParen statement_unmatched','statement_unmatched',5,'p_while','ply_parser.py',163),
  ('statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched','statement_matched',9,'p_for','ply_parser.py',169),
  ('statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched','statement_matched',9,'p_for','ply_parser.py',170),
  ('statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched','statement_unmatched',9,'p_for','ply_parser.py',171),
  ('statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched','statement_unmatched',9,'p_for','ply_parser.py',172),
  ('statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched','statement_unmatched',9,'p_for','ply_parser.py',173),
  ('statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched','statement_unmatched',9,'p_for','ply_parser.py',174),
  ('statement_matched -> Do statement_matched While LParen expression RParen Semi','statement_matched',7,'p_dowhile','ply_parser.py',180),
  ('statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi','statement_unmatched',7,'p_dowhile','ply_parser.py',181),
  ('statement_unmatched -> Do statement_matched While LParen expression RParen Semi','statement_unmatched',7,'p_dowhile','ply_parser.py',182),
  ('statement_matched -> Continue Semi','statement_matched',2,'p_continue','ply_parser.py',188),
  ('statement_matched -> Return expression Semi','statement_matched',3,'p_return','ply_parser.py',195),
  ('statement_matched -> opt_expression Semi','statement_matched',2,'p_expression_statement','ply_parser.py',202),
  ('statement_matched -> LBrace block RBrace','statement_matched',3,'p_block_statement','ply_parser.py',209),
  ('statement_matched -> Break Semi','statement_matched',2,'p_break','ply_parser.py',216),
  ('opt_expression -> expression','opt_expression',1,'p_opt_expression','ply_parser.py',223),
  ('opt_expression -> empty','opt_expression',1,'p_opt_expression_empty','ply_parser.py',230),
  ('declaration -> type Identifier','declaration',2,'p_declaration','ply_parser.py',237),
  ('declaration -> type Identifier Assign expression','declaration',4,'p_declaration_init','ply_parser.py',244),
  ('expression_list -> expression Comma expression_list','expression_list',3,'p_expression_list','ply_parser.py',250),
  ('expression_list -> expression','expression_list',1,'p_expression_list_singal','ply_parser.py',256),
  ('expression_list -> empty','expression_list',1,'p_expression_list_expty','ply_parser.py',262),
  ('expression -> assignment','expression',1,'p_expression_precedence','ply_parser.py',268),
  ('assignment -> conditional','assignment',1,'p_expression_precedence','ply_parser.py',269),
  ('conditional -> logical_or','conditional',1,'p_expression_precedence','ply_parser.py',270),
  ('logical_or -> logical_and','logical_or',1,'p_expression_precedence','ply_parser.py',271),
  ('logical_and -> bit_or','logical_and',1,'p_expression_precedence','ply_parser.py',272),
  ('bit_or -> xor','bit_or',1,'p_expression_precedence','ply_parser.py',273),
  ('xor -> bit_and','xor',1,'p_expression_precedence','ply_parser.py',274),
  ('bit_and -> equality','bit_and',1,'p_expression_precedence','ply_parser.py',275),
  ('equality -> relational','equality',1,'p_expression_precedence','ply_parser.py',276),
  ('relational -> additive','relational',1,'p_expression_precedence','ply_parser.py',277),
  ('additive -> multiplicative','additive',1,'p_expression_precedence','ply_parser.py',278),
  ('multiplicative -> unary','multiplicative',1,'p_expression_precedence','ply_parser.py',279),
  ('unary -> postfix','unary',1,'p_expression_precedence','ply_parser.py',280),
  ('postfix -> primary','postfix',1,'p_expression_precedence','ply_parser.py',281),
  ('postfix -> Identifier LParen expression_list RParen','postfix',4,'p_postfix','ply_parser.py',287),
  ('unary -> Minus unary','unary',2,'p_unary_expression','ply_parser.py',293),
  ('unary -> BitNot unary','unary',2,'p_unary_expression','ply_parser.py',294),
  ('unary -> Not unary','unary',2,'p_unary_expression','ply_parser.py',295),
  ('assignment -> Identifier Assign expression','assignment',3,'p_binary_expression','ply_parser.py',302),
  ('logical_or -> logical_or Or logical_and','logical_or',3,'p_binary_expression','ply_parser.py',303),
  ('logical_and -> logical_and And bit_or','logical_and',3,'p_binary_expression','ply_parser.py',304),
  ('bit_or -> bit_or BitOr xor','bit_or',3,'p_binary_expression','ply_parser.py',305),
  ('xor -> xor Xor bit_and','xor',3,'p_binary_expression','ply_parser.py',306),
  ('bit_and -> bit_and BitAnd equality','bit_and',3,'p_binary_expression','ply_parser.py',307),
  ('equality -> equality NotEqual relational','equality',3,'p_binary_expression','ply_parser.py',308),
  ('equality -> equality Equal relational','equality',3,'p_binary_expression','ply_parser.py',309),
  ('relational -> relational Less additive','relational',3,'p_binary_expression','ply_parser.py',310),
  ('relational -> relational Greater additive','relational',3,'p_binary_expression','ply_parser.py',311),
  ('relational -> relational LessEqual additive','relational',3,'p_binary_expression','ply_parser.py',312),
  ('relational -> relational GreaterEqual additive','relational',3,'p_binary_expression','ply_parser.py',313),
  ('additive -> additive Plus multiplicative','additive',3,'p_binary_expression','ply_parser.py',314),
  ('additive -> additive Minus multiplicative','additive',3,'p_binary_expression','ply_parser.py',315),
  ('multiplicative -> multiplicative Mul unary','multiplicative',3,'p_binary_expression','ply_parser.py',316),
  ('multiplicative -> multiplicative Div unary','multiplicative',3,'p_binary_expression','ply_parser.py',317),
  ('multiplicative -> multiplicative Mod unary','multiplicative',3,'p_binary_expression','ply_parser.py',318),
  ('conditional -> logical_or Question expression Colon conditional','conditional',5,'p_conditional_expression','ply_parser.py',325),
  ('primary -> Integer','primary',1,'p_int_literal_expression','ply_parser.py',332),
  ('primary -> Identifier','primary',1,'p_identifier_expression','ply_parser.py',339),
  ('primary -> LParen expression RParen','primary',3,'p_brace_expression','ply_parser.py',346),
]
